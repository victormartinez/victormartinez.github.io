{"componentChunkName":"component---src-templates-blog-post-js","path":"/pt/blog/2018/2018-02-02-Python_and_elasticsearch/","result":{"data":{"site":{"siteMetadata":{"title":null,"siteUrl":"https://vcrmartinez.com","social":{"twitter":"vcrmartinez","github":"victormartinez","linkedin":"vcrmartinez","speakerdeck":"victormartinez"}}},"markdownRemark":{"id":"37a92855-92db-5b05-808b-f6af904d3e60","excerpt":"So you got lots of documents and need fast querying, huh? Or you have tons of data and need to process and extract metrics. Either way, Elasticsearch (ES) can…","html":"<p>So you got lots of documents and need fast querying, huh? Or you have tons of data and need to process and extract metrics. Either way, Elasticsearch (ES) can be a powerful engine to help you index, query and extract metrics from its document-driven storage. This post is very straightforward and intends to show how to use python to interact with the engine and index/retrieve/query documents.</p>\n<p>The python community has developed two well known projects: <a href=\"http://elasticsearch-py.readthedocs.io/\">elasticsearch-py</a> and <a href=\"http://elasticsearch-dsl.readthedocs.io/\">elasticsearch-dsl</a>. While the former provides some tools to interact with ES and, IMHO, a more granular control over the actions, the latter was built to help you with the search and persistence. Let’s check that.</p>\n<h2>Connecting</h2>\n<p>The first question is: how do I connect to ES? By using <code class=\"language-text\">elasticsearch-dsl</code> you can create a default connection that will be used globally:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">connections<span class=\"token punctuation\">.</span>create_connection<span class=\"token punctuation\">(</span>hosts<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>However, you might want to use a client and have a more granular control. By using <code class=\"language-text\">elasticsearch-py</code> you can achieve that:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> elasticsearch <span class=\"token keyword\">import</span> Elasticsearch\n\nclient <span class=\"token operator\">=</span> Elasticsearch<span class=\"token punctuation\">(</span>hosts<span class=\"token punctuation\">,</span> http_auth<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Execute <code class=\"language-text\">client.indices.get_alias(&quot;*&quot;)</code> to retrieve the existent indexes and check it is properly configured.</p>\n<h2>Persisting</h2>\n<p>Storing our documents is easy because <code class=\"language-text\">elasticsearch-dsl</code> provides DocType – a class that takes care of mapping your python class to JSON documents. Instead of worrying about JSON structures, let’s create a document that stores the user hit to a specific page:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> elasticsearch_dsl <span class=\"token keyword\">import</span> DocType<span class=\"token punctuation\">,</span> Integer<span class=\"token punctuation\">,</span> Date<span class=\"token punctuation\">,</span> Keyword\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserHit</span><span class=\"token punctuation\">(</span>DocType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    page <span class=\"token operator\">=</span> Keyword<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    datetime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    user_id <span class=\"token operator\">=</span> Integer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    environment <span class=\"token operator\">=</span> Keyword<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Pay attention to the fields we chose: Integer, Date, Keyword. They will be mapped to Elasticsearch engine which means that you can use specific features. For example, the datetime field can be used to search a date range or aggregate data by minute,hour, day, month. Another detail is the <code class=\"language-text\">environment</code> field: it a solution to integrate ES with diferent environments: staging, development and production. That way, you do not take the risk of mixing fake data to production data.</p>\n<p>**Updated on Feb 4th **: There is another strategy to not mess with production data: create indexes concatenated with the app environment. By using an env var, your application can create different indexes (e.g. myindex-2018.02.01-production, myindex-2018.02.01-staging, myindex-2018.02.01-development). Thanks for the contribution Robson Peixoto.</p>\n<p>Once you create the class indexing becomes easy:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">user_hit <span class=\"token operator\">=</span> UserHit<span class=\"token punctuation\">(</span>\n    page<span class=\"token operator\">=</span><span class=\"token string\">'product-list'</span><span class=\"token punctuation\">,</span>\n    datetime<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    user_id<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    environment<span class=\"token operator\">=</span><span class=\"token string\">'production'</span>\n<span class=\"token punctuation\">)</span>\n\nUserHit<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">(</span>using<span class=\"token operator\">=</span>client<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>index_name<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Indexed can be True or False depending on the operation success</span>\nindexed <span class=\"token operator\">=</span> user_hit<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>using<span class=\"token operator\">=</span>client<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token string\">'myindex-2018.02.01'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You must be attentive to two issues: (i) before using the document you must ensure the mappings in Elasticsearch are created and that’s why we have to use the <code class=\"language-text\">init</code> method in line 8; (ii) the return of the operation once the <code class=\"language-text\">.save</code> method can return either <code class=\"language-text\">True</code> or <code class=\"language-text\">False</code>.</p>\n<h2>Querying</h2>\n<p>How to query the documents? The snippet below illustrates a simple example.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> elasticsearch_dsl <span class=\"token keyword\">import</span> Search\n<span class=\"token keyword\">from</span> elasticsearch <span class=\"token keyword\">import</span> ElasticsearchException\n\n\nsearch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Search<span class=\"token punctuation\">(</span>using<span class=\"token operator\">=</span>client<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token string\">'myindex-2018.02.01'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token string\">'datetime'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">'match'</span><span class=\"token punctuation\">,</span> page<span class=\"token operator\">=</span><span class=\"token string\">'product-list'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">'match'</span><span class=\"token punctuation\">,</span> user_id<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">'match'</span><span class=\"token punctuation\">,</span> environment<span class=\"token operator\">=</span><span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ncount <span class=\"token operator\">=</span> search<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsearch <span class=\"token operator\">=</span> search<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>count<span class=\"token punctuation\">]</span>\n\nresponse <span class=\"token operator\">=</span> search<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> response<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> ElasticsearchException<span class=\"token punctuation\">(</span><span class=\"token string\">'Fail to get the hits'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>hits</code></pre></div>\n<p>It is important to mention that ES brings only <em>10 results by default and that’s why we need the lines 11 and 12</em>.</p>\n<h2>Filtering</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">search <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Search<span class=\"token punctuation\">(</span>using<span class=\"token operator\">=</span>client<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token string\">'myindex-2018.02.01'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token string\">'datetime'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">'match'</span><span class=\"token punctuation\">,</span> page<span class=\"token operator\">=</span><span class=\"token string\">'product-list'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">'match'</span><span class=\"token punctuation\">,</span> user_id<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">'match'</span><span class=\"token punctuation\">,</span> environment<span class=\"token operator\">=</span><span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nsearch <span class=\"token operator\">=</span> search<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'range'</span><span class=\"token punctuation\">,</span> datetime<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'gte'</span><span class=\"token punctuation\">:</span> from_datetime<span class=\"token punctuation\">,</span> <span class=\"token string\">'lte'</span><span class=\"token punctuation\">:</span> to_datetime<span class=\"token punctuation\">,</span> <span class=\"token string\">'time_zone'</span><span class=\"token punctuation\">:</span> time_zone_delta<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ncount <span class=\"token operator\">=</span> search<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n\nsearch <span class=\"token operator\">=</span> search<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>count<span class=\"token punctuation\">]</span>\n\nresponse <span class=\"token operator\">=</span> search<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>hits<span class=\"token punctuation\">)</span></code></pre></div>\n<p>You have just queried, but now you want to filter the results by a date range. The 7th line does the trick.</p>\n<h2>Aggregating</h2>\n<p>You can generate metrics based on date, for example. The 12th line tells ES to group the data by intervals of 30 minutes.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> elasticsearch_dsl <span class=\"token keyword\">import</span> Search\n<span class=\"token keyword\">from</span> elasticsearch <span class=\"token keyword\">import</span> ElasticsearchException\n\n\nsearch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Search<span class=\"token punctuation\">(</span>using<span class=\"token operator\">=</span>client<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token string\">'myindex-2018.02.01'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token string\">'datetime'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">'match'</span><span class=\"token punctuation\">,</span> page<span class=\"token operator\">=</span><span class=\"token string\">'product-list'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">'match'</span><span class=\"token punctuation\">,</span> user_id<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">'match'</span><span class=\"token punctuation\">,</span> environment<span class=\"token operator\">=</span><span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nsearch <span class=\"token operator\">=</span> search<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'range'</span><span class=\"token punctuation\">,</span> datetime<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'gte'</span><span class=\"token punctuation\">:</span> from_datetime<span class=\"token punctuation\">,</span> <span class=\"token string\">'lte'</span><span class=\"token punctuation\">:</span> to_datetime<span class=\"token punctuation\">,</span> <span class=\"token string\">'time_zone'</span><span class=\"token punctuation\">:</span> time_zone_delta<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nsearch<span class=\"token punctuation\">.</span>aggs<span class=\"token punctuation\">.</span>bucket<span class=\"token punctuation\">(</span><span class=\"token string\">'datetime'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'date_histogram'</span><span class=\"token punctuation\">,</span> field<span class=\"token operator\">=</span><span class=\"token string\">'datetime'</span><span class=\"token punctuation\">,</span> interval<span class=\"token operator\">=</span><span class=\"token string\">'30m'</span><span class=\"token punctuation\">)</span>\n\ncount <span class=\"token operator\">=</span> search<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsearch <span class=\"token operator\">=</span> search<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>count<span class=\"token punctuation\">]</span>\n\nres <span class=\"token operator\">=</span> search<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> response<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> ElasticsearchException<span class=\"token punctuation\">(</span><span class=\"token string\">'Fail to get the hits'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>aggs<span class=\"token punctuation\">[</span><span class=\"token string\">'datetime'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'buckets'</span><span class=\"token punctuation\">]</span></code></pre></div>","frontmatter":{"title":"Python + Elasticsearch","date":"2018-02-02T00:00:00.000Z","description":null,"tags":["elasticsearch","python"],"rating":null,"image_url":null,"image_author":null},"fields":{"slug":"/2018/2018-02-02-Python_and_elasticsearch/"},"timeToRead":3}},"pageContext":{"id":"37a92855-92db-5b05-808b-f6af904d3e60","language":"pt","intl":{"language":"pt","languages":["en","pt"],"messages":{"of":"de","or":"ou","Next":"Próximo","Previous":"Anterior","reading":"leitura","Comments":"Comentários","Featured_image_credits":"Créditos da imagem de destaque","Not_Found":"Não Encontrado","Not_Found_Text":"A página que você está procurando pode ter sido removida, ter seu nome alterado ou estar temporariamente indisponível.","Not_Found_Nav":"Você pode ir para","Warning_deprecated":"Atenção: esse post foi escrito a algum tempo e pode não ser mais válido, ok?"},"routed":true,"originalPath":"/blog/2018/2018-02-02-Python_and_elasticsearch/","redirect":true,"defaultLanguage":"en"}}},"staticQueryHashes":["2841359383"]}