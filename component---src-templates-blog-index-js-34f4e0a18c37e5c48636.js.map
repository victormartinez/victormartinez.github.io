{"version":3,"sources":["webpack:///./src/components/PostItem/styled.js","webpack:///./src/components/PostItem/index.js","webpack:///./src/components/Pagination/styled.js","webpack:///./src/components/Pagination/index.js","webpack:///./src/templates/blog-index.js","webpack:///./src/utils/date.js"],"names":["PostItemWrapper","styled","article","media","lessThan","ImageSection","div","PostLink","Link","Image","Img","greaterThan","between","TextSection","section","Header","header","Title","h2","Description","p","Metadata","Bullet","span","Category","Date","time","ReadingTime","PostItem","path","image","category","date","timeToRead","title","description","intl","useIntl","to","fluid","childImageSharp","formatDate","locale","formatMessage","id","PaginationWrapper","PaginationPrevious","PaginationNext","PaginationPage","PaginationLink","PaginationText","Pagination","isFirst","isLast","currentPage","numPages","prevPage","nextPage","pageQuery","BlogIndex","data","pageContext","siteTitle","site","siteMetadata","blog","noPosts","social","posts","portuguesePosts","nodes","author","name","keywords","allFile","edges","node","publicURL","prevPageUrl","nextPageUrl","length","LayoutContent","meta","property","content","join","Paragraph","text","itemscope","itemtype","map","post","key","fields","slug","pageDetailUrl","frontmatter","excerpt","moment","require","isPostDeprecated","datetime","diff","format","formatted","toUpperCase","slice"],"mappings":"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","file":"component---src-templates-blog-index-js-34f4e0a18c37e5c48636.js","sourcesContent":["import styled from \"styled-components\"\r\nimport media from \"styled-media-query\"\r\nimport { Link } from \"gatsby\"\r\nimport Img from \"gatsby-image\"\r\n\r\nexport const PostItemWrapper = styled.article`\r\n  background-color: #f3f3f3;\r\n  display: flex;\r\n  margin-bottom: 3em;\r\n\r\n  ${media.lessThan(\"medium\")`\r\n    flex-direction: column;\r\n    padding: 1em;\r\n  `};\r\n`\r\n\r\nexport const ImageSection = styled.div``\r\n\r\nexport const PostLink = styled(Link)``\r\n\r\nexport const Image = styled(Img)`\r\n  ${media.greaterThan(\"small\")`\r\n    width: 20em;\r\n    height: 12em;\r\n  `}\r\n\r\n  ${media.between(\"small\", \"medium\")`\r\n    width: 95vw;\r\n    height: 25vh;\r\n  `}\r\n`\r\n\r\nexport const TextSection = styled.section`\r\n  width: 100vw;\r\n  padding: 1em 1em 0em 1.5em;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n\r\n  ${media.lessThan(\"small\")`\r\n    width: 95vw;\r\n  `};\r\n`\r\n\r\nexport const Header = styled.header`\r\n  margin-bottom: 1em;\r\n`\r\n\r\nexport const Title = styled.h2`\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n  line-height: 1.5;\r\n`\r\n\r\nexport const Description = styled.p`\r\n  line-height: 1.8;\r\n  font-size: 1rem;\r\n  font-weight: 300;\r\n`\r\n\r\nexport const Metadata = styled.div`\r\n  margin: 0.5em 0;\r\n  font-weight: 300;\r\n  line-height: 1.8;\r\n  font-size: 0.9rem;\r\n`\r\n\r\nexport const Bullet = styled.span`\r\n  margin: 0 1em;\r\n`\r\n\r\nexport const Category = styled.span``\r\n\r\nexport const Date = styled.time``\r\n\r\nexport const ReadingTime = styled.span``\r\n","import React from \"react\"\r\n\r\nimport { useIntl } from \"gatsby-plugin-intl\"\r\nimport { formatDate } from \"../../utils/date\"\r\nimport * as S from \"./styled\"\r\n\r\nconst PostItem = ({\r\n  path,\r\n  image,\r\n  category,\r\n  date,\r\n  timeToRead,\r\n  title,\r\n  description,\r\n}) => {\r\n  const intl = useIntl()\r\n\r\n  return (\r\n    <S.PostItemWrapper>\r\n      <S.ImageSection>\r\n        <S.PostLink to={path}>\r\n          {image && <S.Image fluid={image?.childImageSharp.fluid} />}\r\n        </S.PostLink>\r\n      </S.ImageSection>\r\n      <S.TextSection>\r\n        <S.Header>\r\n          <S.Title>\r\n            <S.PostLink to={path}>{title}</S.PostLink>\r\n          </S.Title>\r\n\r\n          <S.Metadata>\r\n            <S.Date>{formatDate(date, intl.locale)}</S.Date>\r\n            <S.Bullet>•</S.Bullet>\r\n            <S.ReadingTime>\r\n              {timeToRead} min {intl.formatMessage({ id: \"reading\" })}\r\n            </S.ReadingTime>\r\n            <S.Bullet>•</S.Bullet>\r\n            <S.Category>{category}</S.Category>\r\n          </S.Metadata>\r\n          <S.Description>{description}</S.Description>\r\n        </S.Header>\r\n      </S.TextSection>\r\n    </S.PostItemWrapper>\r\n  )\r\n}\r\n\r\nexport default PostItem\r\n","import styled from \"styled-components\"\r\nimport media from \"styled-media-query\"\r\nimport { Link } from \"gatsby\"\r\n\r\nexport const PaginationWrapper = styled.section`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  font-weight: 900;\r\n  padding: 2em 0;\r\n  height: 2em;\r\n  font-size: 1rem;\r\n\r\n  ${media.lessThan(\"medium\")`\r\n    padding: 2em 1em;\r\n  `}\r\n`\r\n\r\nexport const PaginationPrevious = styled.div`\r\n  width: 6em;\r\n  text-align: left;\r\n`\r\n\r\nexport const PaginationNext = styled.div`\r\n  width: 6em;\r\n  text-align: right;\r\n`\r\n\r\nexport const PaginationPage = styled.div`\r\n  width: 3em;\r\n`\r\n\r\nexport const PaginationLink = styled(Link)`\r\n  height: 1em;\r\n  width: 6em;\r\n`\r\n\r\nexport const PaginationText = styled.p`\r\n  color: #fff;\r\n`\r\n","import React from \"react\"\r\n\r\nimport propTypes from \"prop-types\"\r\nimport { useIntl } from \"gatsby-plugin-intl\"\r\n\r\nimport * as S from \"./styled\"\r\n\r\nconst Pagination = ({\r\n  isFirst,\r\n  isLast,\r\n  currentPage,\r\n  numPages,\r\n  prevPage,\r\n  nextPage,\r\n}) => {\r\n  const intl = useIntl()\r\n\r\n  return (\r\n    <S.PaginationWrapper>\r\n      <S.PaginationPrevious>\r\n        <S.PaginationLink to={isFirst ? \"#\" : prevPage}>\r\n          {isFirst ? null : `← ${intl.formatMessage({ id: \"Previous\" })}`}\r\n        </S.PaginationLink>\r\n      </S.PaginationPrevious>\r\n\r\n      <S.PaginationPage>\r\n        <S.PaginationText>\r\n          {currentPage} {intl.formatMessage({ id: \"of\" })} {numPages}\r\n        </S.PaginationText>\r\n      </S.PaginationPage>\r\n\r\n      <S.PaginationNext>\r\n        <S.PaginationLink to={isLast ? \"#\" : nextPage}>\r\n          {isLast ? null : `→ ${intl.formatMessage({ id: \"Next\" })}`}\r\n        </S.PaginationLink>\r\n      </S.PaginationNext>\r\n    </S.PaginationWrapper>\r\n  )\r\n}\r\n\r\nPagination.propTypes = {\r\n  isFirst: propTypes.bool.isRequired,\r\n  isLast: propTypes.bool.isRequired,\r\n  currentPage: propTypes.number.isRequired,\r\n  numPages: propTypes.number.isRequired,\r\n  prevPage: propTypes.string,\r\n  nextPage: propTypes.string,\r\n}\r\n\r\nexport default Pagination\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\n\r\nimport LayoutContent from \"../components/LayoutContent\"\r\nimport PostItem from \"../components/PostItem\"\r\nimport Pagination from \"../components/Pagination\"\r\nimport Paragraph from \"../components/Paragraph\"\r\nimport SEO from \"../components/seo\"\r\n\r\nimport { useIntl } from \"gatsby-plugin-intl\"\r\nimport {\r\n  pageDetailUrl,\r\n  nextPageUrl,\r\n  prevPageUrl,\r\n} from \"../utils/routing.js\"\r\n\r\nconst BlogIndex = ({ data, pageContext }) => {\r\n  const intl = useIntl()\r\n\r\n  const siteTitle = data.site.siteMetadata[intl.locale].blog.title\r\n  const noPosts = data.site.siteMetadata[intl.locale].noPosts\r\n  const description = data.site.siteMetadata[intl.locale].blog.description\r\n  const social = data.site.siteMetadata.social\r\n  const posts = data.portuguesePosts.nodes\r\n  const author = data.site.siteMetadata.author.name\r\n  const keywords = data.site.siteMetadata.keywords\r\n  const image = data.allFile.edges[0].node.publicURL\r\n\r\n  const routeName = 'blog'\r\n  const { currentPage, numPages } = pageContext\r\n  const isFirst = currentPage === 1\r\n  const isLast = currentPage === numPages\r\n  const prevPage = prevPageUrl(intl.locale, routeName, currentPage)\r\n  const nextPage = nextPageUrl(intl.locale, routeName, currentPage)\r\n\r\n  if (posts.length === 0) {\r\n    return (\r\n      <LayoutContent\r\n        title={siteTitle}\r\n        description={description}\r\n        social={social}\r\n      >\r\n        <SEO\r\n          title={`${author} | ${siteTitle}`}\r\n          description={description}\r\n          image={image}\r\n          meta={[\r\n            {\r\n              property: `keywords`,\r\n              content: keywords.join(\", \"),\r\n            },\r\n          ]}\r\n        />\r\n        <Paragraph text={noPosts} />\r\n      </LayoutContent>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <LayoutContent\r\n      itemscope\r\n      itemtype=\"https://schema.org/Blog\"\r\n      title={siteTitle}\r\n      description={description}\r\n      social={social}\r\n    >\r\n      <SEO\r\n        title={`${author} | ${siteTitle}`}\r\n        description={`${siteTitle} ${description}`}\r\n        image={image}\r\n        meta={[\r\n          {\r\n            property: `keywords`,\r\n            content: keywords.join(\", \"),\r\n          },\r\n        ]}\r\n      />\r\n      {posts.map(post => {\r\n        return (\r\n          <PostItem\r\n            key={post.fields.slug}\r\n            path={`${pageDetailUrl(intl.locale, routeName, post.fields.slug)}`}\r\n            title={post.frontmatter.title || post.fields.slug}\r\n            date={post.frontmatter.date}\r\n            description={post.frontmatter.description || post.excerpt}\r\n            timeToRead={post.timeToRead}\r\n            category={post.frontmatter.category}\r\n            image={post.frontmatter.image}\r\n          />\r\n        )\r\n      })}\r\n      <Pagination\r\n        isFirst={isFirst}\r\n        isLast={isLast}\r\n        currentPage={currentPage}\r\n        numPages={numPages}\r\n        prevPage={prevPage}\r\n        nextPage={nextPage}\r\n      />\r\n    </LayoutContent>\r\n  )\r\n}\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query PostList($skip: Int!, $limit: Int!) {\r\n    allFile(\r\n      filter: {\r\n        absolutePath: { regex: \"/content/assets/\" }\r\n        name: { eq: \"cover\" }\r\n      }\r\n    ) {\r\n      edges {\r\n        node {\r\n          name\r\n          publicURL\r\n        }\r\n      }\r\n    }\r\n    site {\r\n      siteMetadata {\r\n        author {\r\n          name\r\n        }\r\n        social {\r\n          twitter\r\n          github\r\n          linkedin\r\n          speakerdeck\r\n        }\r\n        keywords\r\n        pt {\r\n          noPosts\r\n          blog {\r\n            title\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n    portuguesePosts: allMarkdownRemark(\r\n      filter: {\r\n        fileAbsolutePath: { regex: \"/content/blog/\" }\r\n        frontmatter: { layout: { eq: \"post\" } }\r\n      }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      nodes {\r\n        excerpt(pruneLength: 200)\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          date\r\n          title\r\n          description\r\n          category\r\n          image {\r\n            publicURL\r\n            childImageSharp {\r\n              fluid(maxHeight: 368, maxWidth: 640) {\r\n                ...GatsbyImageSharpFluid_tracedSVG\r\n              }\r\n            }\r\n          }\r\n        }\r\n        timeToRead\r\n      }\r\n    }\r\n  }\r\n`\r\n","const moment = require(\"moment\")\r\n\r\nexport const isPostDeprecated = datetime => {\r\n  const months = moment().diff(\r\n    moment(datetime, \"YYYY-MM-DDTHH:mm:ss\"),\r\n    \"months\"\r\n  )\r\n  return months >= 24\r\n}\r\n\r\nexport const formatDate = (datetime, locale) => {\r\n  if (locale === \"en\") {\r\n    return moment(datetime, \"YYYY-MM-DDTHH:mm:ss\")\r\n      .locale(\"en\")\r\n      .format(\"MMM DD, YYYY\")\r\n  }\r\n  let formatted = moment(datetime, \"YYYY-MM-DDTHH:mm:ss\")\r\n    .locale(\"pt-br\")\r\n    .format(\"MMM DD, YYYY\")\r\n\r\n  return `${formatted[0].toUpperCase()}${formatted.slice(1)}`\r\n}\r\n"],"sourceRoot":""}