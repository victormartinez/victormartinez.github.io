{"version":3,"sources":["webpack:///./src/components/PostItem/styled.js","webpack:///./src/components/PostItem/index.js","webpack:///./src/components/FeaturedPosts/styled.js","webpack:///./src/components/FeaturedPosts/index.js","webpack:///./src/components/Pagination/styled.js","webpack:///./src/components/Pagination/index.js","webpack:///./src/templates/blog-index.js","webpack:///./src/utils/date.js"],"names":["PostItemWrapper","styled","article","media","greaterThan","lessThan","ImageSection","div","PostLink","Link","Image","Img","between","TextSection","section","Header","header","Title","h2","Metadata","Bullet","span","Category","Date","time","ReadingTime","PostItem","path","category","date","timeToRead","title","image","intl","useIntl","to","fluid","childImageSharp","formatDate","locale","formatMessage","id","FeaturedPostsRow","PostItemFeaturedWrapper","FeaturedPosts","posts","postItems","map","p","key","PaginationWrapper","PaginationPrevious","PaginationNext","PaginationPage","PaginationLink","PaginationText","Pagination","isFirst","isLast","currentPage","numPages","prevPage","nextPage","pageQuery","BlogIndex","data","pageContext","siteTitle","site","siteMetadata","blog","noPosts","description","social","portuguesePosts","nodes","author","name","keywords","allFile","edges","node","publicURL","prevPageUrl","nextPageUrl","featuredPostsIndex","featuredPosts","slice","element","fields","slug","pageDetailUrl","frontmatter","excerpt","remainingPosts","length","LayoutContent","meta","property","content","join","Paragraph","text","itemscope","itemtype","post","moment","require","isPostDeprecated","datetime","diff","format","formatted","toUpperCase"],"mappings":"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","file":"component---src-templates-blog-index-js-39fafd4f67e351dcc390.js","sourcesContent":["import styled from \"styled-components\"\nimport media from \"styled-media-query\"\nimport { Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nexport const PostItemWrapper = styled.article`\n  display: flex;\n  margin-bottom: 0.5em;\n  \n  ${media.greaterThan(\"medium\")`\n    color: white;\n  `};\n\n  ${media.lessThan(\"medium\")`\n    flex-direction: column;\n    padding: 1em;\n    background-color: #f3f3f3;\n    margin-bottom: 3em;\n  `};\n`\n\nexport const ImageSection = styled.div``\n\nexport const PostLink = styled(Link)``\n\nexport const Image = styled(Img)`\n\n  -webkit-filter: grayscale(100%); /* Safari 6.0 - 9.0 */\n  filter: grayscale(100%);\n\n  &:hover {\n    -webkit-filter: grayscale(0%); /* Safari 6.0 - 9.0 */\n    filter: grayscale(0%);\n  }\n\n  ${media.greaterThan(\"medium\")`\n    display: None;\n  `};\n\n  ${media.greaterThan(\"small\")`\n    width: 20em;\n    height: 7em;\n  `}\n\n  ${media.between(\"small\", \"medium\")`\n    width: 95vw;\n    height: 25vh;\n  `}\n`\n\nexport const TextSection = styled.section`\n  width: 100vw;\n  padding: 1em 1em 0em 0em;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  ${media.lessThan(\"small\")`\n    width: 95vw;\n  `};\n`\n\nexport const Header = styled.header`\n`\n\nexport const Title = styled.h2`\n  font-size: 1.8rem;\n  font-weight: 600;\n  line-height: 1.5;\n`\n\nexport const Metadata = styled.div`\n  margin: 0.4em 0;\n  font-weight: 300;\n  line-height: 1.8;\n  font-size: 0.9rem;\n\n  ${media.greaterThan(\"medium\")`\n    font-weight: 400;\n  `};\n`\n\nexport const Bullet = styled.span`\n  margin: 0 1em;\n`\n\nexport const Category = styled.span``\n\nexport const Date = styled.time``\n\nexport const ReadingTime = styled.span``\n","import React from \"react\"\n\nimport { useIntl } from \"gatsby-plugin-intl\"\nimport { formatDate } from \"../../utils/date\"\nimport * as S from \"./styled\"\n\nconst PostItem = ({\n  path,\n  category,\n  date,\n  timeToRead,\n  title,\n  image,\n}) => {\n  const intl = useIntl()\n\n  return (\n    <S.PostItemWrapper>\n      <S.ImageSection>\n        <S.PostLink to={path}>\n          {image && <S.Image fluid={image?.childImageSharp.fluid} />}\n        </S.PostLink>\n      </S.ImageSection>\n      <S.TextSection>\n        <S.Header>\n          <S.Title>\n            <S.PostLink to={path}>{title}</S.PostLink>\n          </S.Title>\n          <S.Metadata>\n            <S.Date>{formatDate(date, intl.locale)}</S.Date>\n            <S.Bullet> •</S.Bullet>\n            <S.ReadingTime>\n              {timeToRead} min {intl.formatMessage({ id: \"reading\" })}\n            </S.ReadingTime>\n            <S.Bullet>•</S.Bullet>\n            <S.Category>{category}</S.Category>\n          </S.Metadata>\n        </S.Header>\n      </S.TextSection>\n    </S.PostItemWrapper>\n  )\n}\n\nexport default PostItem\n","import styled from \"styled-components\"\nimport media from \"styled-media-query\"\nimport { Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n\nexport const FeaturedPostsRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n\n  ${media.lessThan(\"medium\")`\n    flex-direction: column;\n  `};\n`\n\nexport const PostItemFeaturedWrapper = styled.article`\n  background-color: #f3f3f3;\n  margin-bottom: 2em;\n  flex-direction: column;\n  width: 32%;\n  border-radius: 10px;\n\n  ${media.lessThan(\"medium\")`\n    padding: 1em;\n    width: 100%;\n\n  `};\n`\n\nexport const ImageSection = styled.div`\n  width: 100%;\n`\n\nexport const PostLink = styled(Link)``\n\nexport const Image = styled(Img)`\n  border-radius: 10px 10px 0 0;\n\n  ${media.greaterThan(\"small\")`\n    width: 100%;\n    height: 7em;\n  `}\n\n  ${media.between(\"small\", \"medium\")`\n    width: 95vw;\n    height: 25vh;\n  `}\n`\n\nexport const TextSection = styled.section`\n  padding: 0.5em 0.5em 0em 0.8em;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  ${media.lessThan(\"small\")`\n    width: 95vw;\n  `};\n`\n\nexport const Header = styled.header`\n  display: flex;\n  flex-direction: column;\n`\n\nexport const Title = styled.h2`\n  font-size: 1.4rem;\n  font-weight: 600;\n  line-height: 1.5;\n`\n\nexport const Metadata = styled.div`\n  margin: 0.4em 0;\n  font-weight: 300;\n  line-height: 1.8;\n  font-size: 0.9rem;\n`\n\nexport const Bullet = styled.span`\n  margin: 0 1em;\n`\n\nexport const Category = styled.span``\n\nexport const Date = styled.time``\n\nexport const ReadingTime = styled.span``\n","import React from \"react\"\n\nimport { useIntl } from \"gatsby-plugin-intl\"\nimport { formatDate } from \"../../utils/date\"\nimport * as S from \"./styled\"\n\nconst FeaturedPosts = ({ posts }) => {\n  const intl = useIntl()\n\n  const postItems = posts.map(p => (\n    <S.PostItemFeaturedWrapper key={p.path}>\n      <S.ImageSection>\n        <S.PostLink to={p.path}>\n          {p.image && <S.Image fluid={p.image?.childImageSharp.fluid} />}\n        </S.PostLink>\n      </S.ImageSection>\n      <S.TextSection>\n        <S.Header>\n          <S.Title>\n            <S.PostLink to={p.path}>{p.title}</S.PostLink>\n          </S.Title>\n\n          <S.Metadata>\n            <S.Date>{formatDate(p.date, intl.locale)}</S.Date>\n            <S.Bullet>•</S.Bullet>\n            <S.ReadingTime>\n              {p.timeToRead} min {intl.formatMessage({ id: \"reading\" })}\n            </S.ReadingTime>\n            <S.Bullet>•</S.Bullet>\n            <S.Category>{p.category}</S.Category>\n          </S.Metadata>\n        </S.Header>\n      </S.TextSection>\n    </S.PostItemFeaturedWrapper>\n  ));\n\n  return <S.FeaturedPostsRow>{postItems}</S.FeaturedPostsRow>\n}\n\n\nexport default FeaturedPosts;\n","import styled from \"styled-components\"\nimport media from \"styled-media-query\"\nimport { Link } from \"gatsby\"\n\nexport const PaginationWrapper = styled.section`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-weight: 600;\n  padding: 2em 0;\n  height: 2em;\n  font-size: 1rem;\n\n  ${media.lessThan(\"medium\")`\n    padding: 2em 1em;\n  `}\n`\n\nexport const PaginationPrevious = styled.div`\n  width: 6em;\n  text-align: left;\n`\n\nexport const PaginationNext = styled.div`\n  width: 6em;\n  text-align: right;\n`\n\nexport const PaginationPage = styled.div`\n`\n\nexport const PaginationLink = styled(Link)`\n  height: 1em;\n  width: 6em;\n`\n\nexport const PaginationText = styled.p`\n  color: #fff;\n`\n","import React from \"react\"\n\nimport propTypes from \"prop-types\"\nimport { useIntl } from \"gatsby-plugin-intl\"\n\nimport * as S from \"./styled\"\n\nconst Pagination = ({\n  isFirst,\n  isLast,\n  currentPage,\n  numPages,\n  prevPage,\n  nextPage,\n}) => {\n  const intl = useIntl()\n\n  return (\n    <S.PaginationWrapper>\n      <S.PaginationPrevious>\n        <S.PaginationLink to={isFirst ? \"#\" : prevPage}>\n          {isFirst ? null : `← ${intl.formatMessage({ id: \"Previous\" })}`}\n        </S.PaginationLink>\n      </S.PaginationPrevious>\n\n      <S.PaginationPage>\n        <S.PaginationText>\n          {currentPage} {intl.formatMessage({ id: \"of\" })} {numPages}\n        </S.PaginationText>\n      </S.PaginationPage>\n\n      <S.PaginationNext>\n        <S.PaginationLink to={isLast ? \"#\" : nextPage}>\n          {isLast ? null : `→ ${intl.formatMessage({ id: \"Next\" })}`}\n        </S.PaginationLink>\n      </S.PaginationNext>\n    </S.PaginationWrapper>\n  )\n}\n\nPagination.propTypes = {\n  isFirst: propTypes.bool.isRequired,\n  isLast: propTypes.bool.isRequired,\n  currentPage: propTypes.number.isRequired,\n  numPages: propTypes.number.isRequired,\n  prevPage: propTypes.string,\n  nextPage: propTypes.string,\n}\n\nexport default Pagination\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport LayoutContent from \"../components/LayoutContent\"\nimport PostItem from \"../components/PostItem\"\nimport FeaturedPosts from \"../components/FeaturedPosts\"\nimport Pagination from \"../components/Pagination\"\nimport Paragraph from \"../components/Paragraph\"\nimport SEO from \"../components/seo\"\n\nimport { useIntl } from \"gatsby-plugin-intl\"\nimport {\n  pageDetailUrl,\n  nextPageUrl,\n  prevPageUrl,\n} from \"../utils/routing.js\"\n\nconst BlogIndex = ({ data, pageContext }) => {\n  const intl = useIntl()\n\n  const siteTitle = data.site.siteMetadata[intl.locale].blog.title\n  const noPosts = data.site.siteMetadata[intl.locale].noPosts\n  const description = data.site.siteMetadata[intl.locale].blog.description\n  const social = data.site.siteMetadata.social\n  const posts = data.portuguesePosts.nodes\n  const author = data.site.siteMetadata.author.name\n  const keywords = data.site.siteMetadata.keywords\n  const image = data.allFile.edges[0].node.publicURL\n\n  const routeName = 'blog'\n  const { currentPage, numPages } = pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = prevPageUrl(intl.locale, routeName, currentPage)\n  const nextPage = nextPageUrl(intl.locale, routeName, currentPage)\n\n  const countFeaturedPosts = 3;\n  const featuredPostsIndex = isFirst ? countFeaturedPosts : 0\n\n  const featuredPosts = posts.slice(0, featuredPostsIndex).map(element => {\n    return {\n      key: element.fields.slug,\n      path: `${pageDetailUrl(intl.locale, routeName, element.fields.slug)}`,\n      title: element.frontmatter.title || element.fields.slug,\n      image: element.frontmatter.image,\n      date: element.frontmatter.date,\n      description: element.frontmatter.description || element.excerpt,\n      timeToRead: element.timeToRead,\n      category: element.frontmatter.category,\n    }\n  });\n\n  const remainingPosts = posts.slice(featuredPostsIndex, posts.length);\n\n  if (posts.length === 0) {\n    return (\n      <LayoutContent\n        title={siteTitle}\n        description={description}\n        social={social}\n      >\n        <SEO\n          title={`${author} | ${siteTitle}`}\n          description={description}\n          image={image}\n          meta={[\n            {\n              property: `keywords`,\n              content: keywords.join(\", \"),\n            },\n          ]}\n        />\n        <Paragraph text={noPosts} />\n      </LayoutContent>\n    )\n  }\n\n  return (\n    <LayoutContent\n      itemscope\n      itemtype=\"https://schema.org/Blog\"\n      title={siteTitle}\n      description={description}\n      social={social}\n    >\n      <SEO\n        title={`${author} | ${siteTitle}`}\n        description={`${siteTitle} ${description}`}\n        image={image}\n        meta={[\n          {\n            property: `keywords`,\n            content: keywords.join(\", \"),\n          },\n        ]}\n      />\n\n      <FeaturedPosts posts={featuredPosts} />\n\n      {remainingPosts.map(post => {\n        return (\n          <PostItem\n            key={post.fields.slug}\n            path={`${pageDetailUrl(intl.locale, routeName, post.fields.slug)}`}\n            title={post.frontmatter.title || post.fields.slug}\n            date={post.frontmatter.date}\n            description={post.frontmatter.description || post.excerpt}\n            timeToRead={post.timeToRead}\n            category={post.frontmatter.category}\n            image={post.frontmatter.image}\n          />\n        )\n      })}\n\n      <Pagination\n        isFirst={isFirst}\n        isLast={isLast}\n        currentPage={currentPage}\n        numPages={numPages}\n        prevPage={prevPage}\n        nextPage={nextPage}\n      />\n    </LayoutContent>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query PostList($skip: Int!, $limit: Int!) {\n    allFile(\n      filter: {\n        absolutePath: { regex: \"/content/assets/\" }\n        name: { eq: \"cover\" }\n      }\n    ) {\n      edges {\n        node {\n          name\n          publicURL\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author {\n          name\n        }\n        social {\n          twitter\n          github\n          linkedin\n          speakerdeck\n        }\n        keywords\n        pt {\n          noPosts\n          blog {\n            title\n            description\n          }\n        }\n      }\n    }\n    portuguesePosts: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"/content/blog/\" }\n        frontmatter: { layout: { eq: \"post\" } }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        excerpt(pruneLength: 180)\n        fields {\n          slug\n        }\n        frontmatter {\n          date\n          title\n          description\n          category\n          image {\n            publicURL\n            childImageSharp {\n              fluid(maxHeight: 368, maxWidth: 640) {\n                ...GatsbyImageSharpFluid_tracedSVG\n              }\n            }\n          }\n        }\n        timeToRead\n      }\n    }\n  }\n`\n","const moment = require(\"moment\")\n\nexport const isPostDeprecated = datetime => {\n  const months = moment().diff(\n    moment(datetime, \"YYYY-MM-DDTHH:mm:ss\"),\n    \"months\"\n  )\n  return months >= 24\n}\n\nexport const formatDate = (datetime, locale) => {\n  if (locale === \"en\") {\n    return moment(datetime, \"YYYY-MM-DDTHH:mm:ss\")\n      .locale(\"en\")\n      .format(\"MMM DD, YYYY\")\n  }\n  let formatted = moment(datetime, \"YYYY-MM-DDTHH:mm:ss\")\n    .locale(\"pt-br\")\n    .format(\"MMM DD, YYYY\")\n\n  return `${formatted[0].toUpperCase()}${formatted.slice(1)}`\n}\n"],"sourceRoot":""}