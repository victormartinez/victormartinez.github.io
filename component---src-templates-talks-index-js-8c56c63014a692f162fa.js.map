{"version":3,"sources":["webpack:///./src/components/Talks/styled.js","webpack:///./src/components/Talks/index.js","webpack:///./src/templates/talks-index.js"],"names":["TalkMain","styled","div","media","greaterThan","TalkItemWrapper","article","lessThan","ImageSection","Url","Link","Image","Img","between","TextSection","section","Header","header","Title","h2","BodyItems","ul","Item","li","Talks","span","talkItems","talks","map","t","image","fluid","childImageSharp","title","website","to","target","rel","event","Date","date","toISOString","split","where","slides","video","pageQuery","TalksIndex","data","intl","useIntl","siteTitle","site","siteMetadata","locale","noPosts","description","social","posts","nodes","author","name","keywords","allFile","edges","node","publicURL","talkElements","element","key","fields","slug","frontmatter","length","LayoutContent","meta","property","content","join","Paragraph","text","itemscope","itemtype"],"mappings":"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","file":"component---src-templates-talks-index-js-8c56c63014a692f162fa.js","sourcesContent":["import styled from \"styled-components\"\nimport media from \"styled-media-query\"\n\nimport { Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nexport const TalkMain = styled.div`\n  ${media.greaterThan(\"medium\")`\n    display: grid;\n    grid-template-columns: auto auto auto;\n  `};\n`\n\nexport const TalkItemWrapper = styled.article`\n  display: flex;\n  flex-direction: column;\n  margin: 0 2em 2em 0;\n  background-color: #f3f3f3;\n  padding-bottom: 0.5em;\n  border-radius: 10px;\n\n\n  ${media.lessThan(\"medium\")`\n    flex-direction: column;\n    padding: 1em;\n  `};\n`\n\nexport const ImageSection = styled.div``\n\nexport const Url = styled(Link)``\n\nexport const Image = styled(Img)`\n  border-radius: 10px 10px 0 0;\n\n  ${media.greaterThan(\"small\")`\n    height: 12em;\n  `}\n\n  ${media.between(\"small\", \"medium\")`\n    height: 25vh;\n  `}\n`\n\nexport const TextSection = styled.section`\n  width: 100%;\n  padding: 1em 1em 0em 1.5em;\n`\n\nexport const Header = styled.header`\n  \n`\n\nexport const Title = styled.h2`\n  font-size: 1.3rem;\n  font-weight: 600;\n  margin-bottom: 0.5em;\n`\n\nexport const BodyItems = styled.ul`\n  list-style-type: disc;\n  padding-left: 1em;\n`\n\nexport const Item = styled.li`\n  margin-bottom: 0.6em;\n`\n\nexport const ItemText = styled.span``\n","import React from \"react\"\n\nimport * as S from \"./styled\"\n\nconst Talks = ({ talks }) => {\n  const talkItems = talks.map(t => (\n    <S.TalkItemWrapper>\n      <S.ImageSection>\n        {t.image && <S.Image fluid={t.image?.childImageSharp.fluid} />}\n      </S.ImageSection>\n      <S.TextSection>\n        <S.Header>\n          <S.Title>{t.title}</S.Title>\n        </S.Header>\n        <S.BodyItems>\n          <S.Item>\n            {`Evento: `}\n            {\n              t.website &&\n              <S.Url to={t.website} target=\"_blank\" rel=\"noopener noreferrer\"> {t.event}</S.Url>\n            }\n            {!t.website && t.event}\n          </S.Item>\n          <S.Item>Quando: {new Date(t.date).toISOString().split('T')[0]}</S.Item>\n          <S.Item>Onde: {t.where}</S.Item>\n          {t.slides && <S.Item><S.Url to={t.slides} target=\"_blank\" rel=\"noopener noreferrer\"> Slides</S.Url></S.Item>}\n          {t.video && <S.Item><S.Url to={t.video} target=\"_blank\" rel=\"noopener noreferrer\"> Video</S.Url></S.Item>}\n        </S.BodyItems>\n      </S.TextSection>\n    </S.TalkItemWrapper>\n  ));\n\n  return <S.TalkMain>{talkItems}</S.TalkMain>;\n}\n\n\n\nexport default Talks\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport LayoutContent from \"../components/LayoutContent\"\nimport Talks from \"../components/Talks\"\nimport Paragraph from \"../components/Paragraph\"\nimport SEO from \"../components/seo\"\n\nimport { useIntl } from \"gatsby-plugin-intl\"\n\nconst TalksIndex = ({ data }) => {\n  const intl = useIntl()\n\n  const siteTitle = data.site.siteMetadata[intl.locale].talks.title\n  const noPosts = data.site.siteMetadata[intl.locale].noPosts\n  const description = data.site.siteMetadata[intl.locale].talks.description\n  const social = data.site.siteMetadata.social\n  const posts = data.talks.nodes\n  const author = data.site.siteMetadata.author.name\n  const keywords = data.site.siteMetadata.keywords\n  const image = data.allFile.edges[0].node.publicURL\n  const talkElements = posts.map(element => {\n    return {\n      key: element.fields.slug,\n      title: element.frontmatter.title,\n      date: element.frontmatter.date,\n      image: element.frontmatter.image,\n      slides: element.frontmatter.slides,\n      event: element.frontmatter.event,\n      where: element.frontmatter.where,\n      video: element.frontmatter.video,\n      website: element.frontmatter.website,\n    }\n  });\n\n  if (posts.length === 0) {\n    return (\n      <LayoutContent\n        title={siteTitle}\n        description={description}\n        social={social}\n      >\n        <SEO\n          title={`${author} | ${siteTitle}`}\n          description={description}\n          image={image}\n          meta={[\n            {\n              property: `keywords`,\n              content: keywords.join(\", \"),\n            },\n          ]}\n        />\n        <Paragraph text={noPosts} />\n      </LayoutContent>\n    )\n  }\n\n  return (\n    <LayoutContent\n      itemscope\n      itemtype=\"https://schema.org/Blog\"\n      title={siteTitle}\n      description={description}\n      social={social}\n    >\n      <SEO\n        title={`${author} | ${siteTitle}`}\n        description={`${siteTitle} ${description}`}\n        image={image}\n        meta={[\n          {\n            property: `keywords`,\n            content: keywords.join(\", \"),\n          },\n        ]}\n      />\n\n      <Talks talks={talkElements} />\n    </LayoutContent>\n  )\n}\n\nexport default TalksIndex\n\nexport const pageQuery = graphql`\n  query TalksList {\n    allFile(\n      filter: {\n        absolutePath: { regex: \"/content/assets/\" }\n        name: { eq: \"cover\" }\n      }\n    ) {\n      edges {\n        node {\n          name\n          publicURL\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author {\n          name\n        }\n        social {\n          twitter\n          github\n          linkedin\n          speakerdeck\n        }\n        keywords\n        pt {\n          noPosts\n          talks {\n            title\n            description\n          }\n        }\n      }\n    }\n    talks: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"/content/talks/\" }\n        frontmatter: { layout: { eq: \"talk\" } }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      nodes {\n        excerpt(pruneLength: 200)\n        fields {\n          slug\n        }\n        frontmatter {\n          date\n          title\n          slides\n          event\n          where\n          video\n          website\n          image {\n            publicURL\n            childImageSharp {\n              fluid(maxHeight: 368, maxWidth: 640) {\n                ...GatsbyImageSharpFluid_tracedSVG\n              }\n            }\n          }\n        }\n        timeToRead\n      }\n    }\n  }\n`\n"],"sourceRoot":""}