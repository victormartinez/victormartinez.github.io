{"componentChunkName":"component---src-templates-blog-post-js","path":"/en/blog/2020/2020-04-23-Nginx_with_certbot/","result":{"data":{"site":{"siteMetadata":{"title":null,"siteUrl":"https://vcrmartinez.com","social":{"twitter":"vcrmartinez","github":"victormartinez","linkedin":"vcrmartinez","speakerdeck":"victormartinez"}}},"markdownRemark":{"id":"49be1a95-7333-52be-9dc2-f04372960ea8","excerpt":"Working in a team with no DevOps expertise forces you to manage to get things done regarding infrastructure. We had to install and configure a RabbitMQ instance…","html":"<p>Working in a team with no DevOps expertise forces you to manage to get things done regarding infrastructure. We had to install and configure a <a href=\"https://www.rabbitmq.com/\">RabbitMQ</a> instance behind a <a href=\"https://www.nginx.com/\">Nginx</a> with HTTPS. This is a straighforward post on how to install and configure the reverse proxy with <a href=\"https://letsencrypt.org\">Let’s Encrypt</a>.</p>\n<h2>Nginx</h2>\n<p>In this tutorial Nginx works as a Reverse Proxy by forwarding external requests from the Internet to the internal service. Let’s get started.</p>\n<p><strong>1. Create an <code class=\"language-text\">A</code> record in your DNS provider:</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Type</th>\n<th align=\"center\">Name</th>\n<th>Content</th>\n<th>TTL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">A</td>\n<td align=\"center\">yourwebsite</td>\n<td>123.456.78.91</td>\n<td>Auto</td>\n</tr>\n</tbody>\n</table>\n<p><strong>2. Install Nginx and enable it:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> nginx-full\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> nginx</code></pre></div>\n<p>Manage your nginx instance with the commands below:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl restart nginx\n<span class=\"token function\">sudo</span> systemctl reload nginx\n<span class=\"token function\">sudo</span> systemctl status nginx</code></pre></div>\n<p><strong>3. Create a configuration file in the directory</strong> <code class=\"language-text\">/etc/nginx/sites-available/</code><strong>. A nice pattern is to name the file according to the DNS of your service:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/etc/nginx/sites-available/yourwebsite.com</code></pre></div>\n<p><strong>4. Replace the content below according to your necessities:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n  server_name &lt;YOUR-DNS&gt;;\n  access_log /var/log/nginx/access.log;\n  error_log /var/log/nginx/error.log;\n  location / {\n          client_body_buffer_size 128k;\n          proxy_send_timeout   90;\n          proxy_read_timeout   90;\n          proxy_buffer_size    4k;\n          proxy_buffers     16 32k;\n          proxy_busy_buffers_size 64k;\n          proxy_temp_file_write_size 64k;\n          proxy_connect_timeout 30s;\n          proxy_pass   http://&lt;YOUR-LOCAL&gt;:&lt;PORT&gt;;\n          proxy_set_header   Host   $host;\n          proxy_set_header   X-Real-IP  $remote_addr;\n          proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n  }\n}</code></pre></div>\n<p><strong>5. Create a symbolic link to the sites-enabled folder:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> -s /etc/nginx/sites-available/<span class=\"token operator\">&lt;</span>your-filename<span class=\"token operator\">></span> /etc/nginx/sites-enabled/<span class=\"token operator\">&lt;</span>your-filename<span class=\"token operator\">></span></code></pre></div>\n<p><strong>6. Load the configuration and check the status:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl reload nginx\n<span class=\"token function\">sudo</span> systemctl status nginx</code></pre></div>\n<p>The output below illustrates that our Nginx is working properly (sensitive data was ommited).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> nginx.service - A high performance web server and a reverse proxy server\n   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)\n   Active: active (running) since Tue 2019-08-13 18:18:09 UTC; 3 months 7 days ago\n     Docs: man:nginx(8)\n Main PID: 6027 (nginx)\n    Tasks: 5 (limit: 4915)\n   CGroup: /system.slice/nginx.service\n           ├─5198 nginx: worker process\n           ├─5199 nginx: worker process\n           ├─5200 nginx: worker process\n           ├─5201 nginx: worker process\n           └─6027 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;\n\nAug 13 18:18:09 systemd[1]: Starting A high performance web server and a reverse proxy server...\nAug 13 18:18:09 systemd[1]: Started A high performance web server and a reverse proxy server.\nAug 13 18:53:04 systemd[1]: Reloading A high performance web server and a reverse proxy server.\nAug 13 18:53:04 systemd[1]: Reloaded A high performance web server and a reverse proxy server.\nAug 13 18:58:21 systemd[1]: Reloading A high performance web server and a reverse proxy server.\nAug 13 18:58:21 systemd[1]: Reloaded A high performance web server and a reverse proxy server.</code></pre></div>\n<h2>Certbot</h2>\n<p>To enable HTTPS on your website, you need to get a certificate from a Certificate Authority (CA). We can use Let’s Encrypt and the Certbot client to setup the environment.</p>\n<p><strong>1. Install Certbot with nginx plugin:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> python-certbot-nginx</code></pre></div>\n<p><strong>2. Execute certbot passing your domain as parameter:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> certbot --nginx -d <span class=\"token operator\">&lt;</span>YOUR-DOMAIN<span class=\"token operator\">></span></code></pre></div>\n<p><strong>3. Ensure autorenew is configured in the Linux cronjob:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> /etc/cron.d/certbot</code></pre></div>\n<p>Voilà!</p>\n<h2>Links</h2>\n<p>You might find useful the links below:</p>\n<ul>\n<li><a href=\"https://tecadmin.net/auto-renew-lets-encrypt-certificates/\">Certbot.org</a></li>\n<li><a href=\"https://tecadmin.net/auto-renew-lets-encrypt-certificates/\">Techmonger: Certbot Auto Renew/</a></li>\n<li><a href=\"https://tecadmin.net/auto-renew-lets-encrypt-certificates/\">Tecadmin: Auto renew lets encrypt certificates</a></li>\n</ul>","frontmatter":{"title":"Nginx + Certbox straight to the point","date":"Apr 23, 2020","description":null,"tags":["nginx","certbot","https","reverse proxy"],"rating":null,"image_url":null,"image_author":null},"fields":{"slug":"/2020/2020-04-23-Nginx_with_certbot/"},"timeToRead":3},"previous":{"fields":{"slug":"/2020/2020-05-26-Review_Monolith_to_Microservices/"},"frontmatter":{"title":"Review: Monolith to Microservices"}},"next":{"fields":{"slug":"/2020/2020-03-28-Quick_tip_kubectx_easy_switch_between_k8s_clusters/"},"frontmatter":{"title":"Quick tip: kubectx for easy switch between clusters"}}},"pageContext":{"id":"49be1a95-7333-52be-9dc2-f04372960ea8","previousPostId":"9a321162-e375-59b5-9632-1a43c967c073","nextPostId":"5cf4ebcd-8cdf-5119-9d9a-9db9bfc5d5fb","language":"en","intl":{"language":"en","languages":["en","pt"],"messages":{"of":"of","Next":"Next","Previous":"Previous","reading":"reading","Comments":"Comments","Featured_image_credits":"Featured image credits"},"routed":true,"originalPath":"/blog/2020/2020-04-23-Nginx_with_certbot/","redirect":true,"defaultLanguage":"en"}}},"staticQueryHashes":["2841359383"]}