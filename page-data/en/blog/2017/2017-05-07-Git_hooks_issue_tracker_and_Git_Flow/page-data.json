{"componentChunkName":"component---src-templates-blog-post-js","path":"/en/blog/2017/2017-05-07-Git_hooks_issue_tracker_and_Git_Flow/","result":{"data":{"site":{"siteMetadata":{"title":null,"siteUrl":"https://vcrmartinez.com","social":{"twitter":"vcrmartinez","github":"victormartinez","linkedin":"vcrmartinez","speakerdeck":"victormartinez"}}},"markdownRemark":{"id":"f7cc34b2-7025-52bb-a03e-0b948e741db6","excerpt":"At Agilize a common developer workflow involves the usage of Jira for issue tracking, Git + Git Flow for versioning code, Slack for communication and programmer…","html":"<p>At <a href=\"https://www.agilize.com.br/\">Agilize</a> a common developer workflow involves the usage of Jira for issue tracking, Git + Git Flow for versioning code, Slack for communication and programmer’s tools like IDE, Text Editor and Terminal. Basically, a prioritized sprint is maintained in Jira full of cards that describe the features, bugs, spikes and chores following some conventions of SCRUM and the software engineer assign himself to a card. During the development there is a convention that <strong>commits must have the issue code the engineer is working on</strong>. After some commits the convention gets boring (you have to type the issue code all time). Hopefully there is a way to automate that.</p>\n<h2>Git Hooks</h2>\n<p>Git allows us to run a script every time a particular event occurs in the repository. For instance, it is impossible to populate the text editor with a template message.This <a href=\"https://www.atlassian.com/git/tutorials/git-hooks\">tutorial</a> explains the power of git hooks and provides a snippet that will be customized in this post to address our necessities.</p>\n<p>Inside your repository there is a folder <em>.git/hooks</em> that contains some sample scripts that can be used as a playground and they end with <em>.sample</em> in order to not be interpreted by Git. Create a file named <em>prepare-commit-msg</em> that will contain the code below to automate the commit message.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GIT_EDITOR</span><span class=\"token operator\">=</span><span class=\"token string\">\"vim -c'startinsert|norm! ggA'\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env python3</span>\n<span class=\"token function\">import</span> sys, os, re\nfrom subprocess <span class=\"token function\">import</span> check_output\n\n<span class=\"token comment\"># Setup</span>\nbranch_regex <span class=\"token operator\">=</span> r<span class=\"token string\">'.+/(AGZ-\\d+).*'</span>\n\n<span class=\"token comment\"># Collect the parameters</span>\ncommit_msg_filepath <span class=\"token operator\">=</span> sys.argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Figure out which branch we're on</span>\nbranch <span class=\"token operator\">=</span> check_output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'git'</span>, <span class=\"token string\">'symbolic-ref'</span>, <span class=\"token string\">'--short'</span>, <span class=\"token string\">'HEAD'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>.strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Populate the commit message with the issue #, if there is one</span>\nissue_match <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span>branch_regex, branch.decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>, re.M<span class=\"token operator\">|</span>re.I<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> issue_match:\n    issue_code <span class=\"token operator\">=</span> issue_match.group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    with open<span class=\"token punctuation\">(</span>commit_msg_filepath, <span class=\"token string\">'r+'</span><span class=\"token punctuation\">)</span> as f:\n        content <span class=\"token operator\">=</span> f.read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        f.seek<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        f.write<span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s\"</span> % <span class=\"token punctuation\">(</span>issue_code, content<span class=\"token punctuation\">))</span></code></pre></div>\n<p>After typing <em>git commit</em> the file above is called to populate the commit message and, thus, enables us to adopt a template in our commits. The script is called with three arguments:</p>\n<ol>\n<li>File name</li>\n<li>The name of a temporary file that contains the message</li>\n<li>The type of commit</li>\n<li>The commit SHA1 hash</li>\n</ol>\n<p>At Agilize the issue code follows the regex in the line 6. Once we use <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">gitflow</a> to manage our branches they will always follow some examples like <em>feature/AGZ-1256</em>, <em>hotfix/AGZ-981</em>, <em>release/AGZ-453</em>. Therefore, commits are not created in the master or dev branches. Due to that, the variable in the line 6 defines a regex that will use the branch name to create our commit message. If you want to apply that to your company it just takes to update the regex (pay attention to the regex group in line 17).</p>\n<p>The lines 15 and 16 check if the current branch is not master/dev and contains the issue code. The final lines just create the message with the code.</p>\n<p><strong>Obs:</strong></p>\n<p>You can make the cursor start right after the template message. Just add the snippet below to your <em>.bashrc</em> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GIT_EDITOR</span><span class=\"token operator\">=</span><span class=\"token string\">\"vim -c'startinsert|norm! ggA'\"</span></code></pre></div>\n<h4>References</h4>\n<p>Want more resources? Check out the links below:</p>\n<ol>\n<li><a href=\"https://www.atlassian.com/git/tutorials/git-hooks\">https://www.atlassian.com/git/tutorials/git-hooks</a></li>\n<li><a href=\"http://stackoverflow.com/questions/41232722/open-git-commit-editor-to-specific-cursor-location\">http://stackoverflow.com/questions/41232722/open-git-commit-editor-to-specific-cursor-location</a></li>\n</ol>","frontmatter":{"title":"Git hooks, issue tracker and Git Flow","date":"May 07, 2017","description":null,"tags":["git","gitflow","hooks"],"rating":null,"image_url":null,"image_author":null},"fields":{"slug":"/2017/2017-05-07-Git_hooks_issue_tracker_and_Git_Flow/"},"timeToRead":3},"previous":{"fields":{"slug":"/2017/2017-08-04-Integrating_PyCharm_with_Pyenv/"},"frontmatter":{"title":"Integrating PyCharm with Pyenv"}},"next":null},"pageContext":{"id":"f7cc34b2-7025-52bb-a03e-0b948e741db6","previousPostId":"42ef6ebe-b56d-5c74-875d-173273cd0870","nextPostId":"f44aad86-6e98-5266-a155-826f5e068c2e","language":"en","intl":{"language":"en","languages":["en","pt"],"messages":{"of":"of","Next":"Next","Previous":"Previous","reading":"reading","Comments":"Comments","Featured_image_credits":"Featured image credits"},"routed":true,"originalPath":"/blog/2017/2017-05-07-Git_hooks_issue_tracker_and_Git_Flow/","redirect":true,"defaultLanguage":"en"}}},"staticQueryHashes":["2841359383"]}