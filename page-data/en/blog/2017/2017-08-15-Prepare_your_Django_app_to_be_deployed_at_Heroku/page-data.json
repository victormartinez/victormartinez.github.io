{"componentChunkName":"component---src-templates-blog-post-js","path":"/en/blog/2017/2017-08-15-Prepare_your_Django_app_to_be_deployed_at_Heroku/","result":{"data":{"site":{"siteMetadata":{"title":null,"siteUrl":"https://vcrmartinez.com","social":{"twitter":"vcrmartinez","github":"victormartinez","linkedin":"vcrmartinez","speakerdeck":"victormartinez"}}},"markdownRemark":{"id":"b10b4e1d-94f9-5516-aa0e-5be5010259d3","excerpt":"It is really exciting to build our own projects and see it working on production environment, right? Some developers might think deploying a Django app to aâ€¦","html":"<p>It is really exciting to build our own projects and see it working on production environment, right? Some developers might think deploying a Django app to a server is a nightmare. In this post I will show how to prepare your application to have different configurations and deploy it to Heroku.</p>\n<p><strong>Requirements:</strong> You must install <a href=\"https://devcenter.heroku.com/articles/heroku-cli\">Heroku CLI</a> and <strong>GIT</strong>.</p>\n<h2>Heroku</h2>\n<p><a href=\"http://www.heroku.com\">Heroku</a> is the PaaS that will host our project. Go to the dashboard and create your new app. Go to the <a href=\"https://dashboard.heroku.com/apps\">dashboard</a> and create your new app.</p>\n<p>Once you have created you app, it is necessart to use the terminal to set up your credentials. We need the Heroku CLI to access the app settings (check the <a href=\"https://devcenter.heroku.com/articles/heroku-cli\">docs</a> to install it properly).</p>\n<p>After installing you can login:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">heroku login\nheroku addons:create heroku-postgresql:<span class=\"token operator\">&lt;</span>your-plan-name<span class=\"token operator\">></span> -a <span class=\"token operator\">&lt;</span>your-application-name<span class=\"token operator\">></span></code></pre></div>\n<p>Later on we will use a PostgreSQL. Heroku helps us to provide a pg database by running the command. It is quite easy and you can learn about that in the <a href=\"https://devcenter.heroku.com/articles/heroku-postgresql#provisioning-heroku-postgres\">docs</a>.</p>\n<p><strong>Hint:</strong> The command <code class=\"language-text\">$ heroku apps</code> is very handy and allows us to see the apps we have.</p>\n<h2>Preparing our application</h2>\n<p>When it comes to managing local and production environments I like to use <a href=\"https://github.com/henriquebastos/python-decouple\">python decouple</a> because it allows me to use env vars and, thus, to have different configurations. Plus, I use <a href=\"https://github.com/kennethreitz/dj-database-url\">dj<em>database</em>url</a> to make it easy to use different databases with a single configuration string.</p>\n<p>1. At first, create two files: <em>.env</em> and <em>.env-sample</em>. The first will be used in our local environment and must be ignored by GIT. The second works as a template:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">SECRET_KEY</span><span class=\"token operator\">=</span>YOUR_KEY_GOES_HERE\n<span class=\"token assign-left variable\">DEBUG</span><span class=\"token operator\">=</span>True\n<span class=\"token assign-left variable\">ALLOWED_HOSTS</span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1,localhost,.herokuapp.com</code></pre></div>\n<p>2. Open your <em>settings.py</em>, import the modules we will use and use the configuration bellow:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> decouple <span class=\"token keyword\">import</span> config<span class=\"token punctuation\">,</span> Csv\n<span class=\"token keyword\">from</span> dj_database_url <span class=\"token keyword\">import</span> parse <span class=\"token keyword\">as</span> dburl\n\nSECRET_KEY <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'SECRET_KEY'</span><span class=\"token punctuation\">)</span>\nDEBUG <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'DEBUG'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> cast<span class=\"token operator\">=</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n\nALLOWED_HOSTS <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'ALLOWED_HOSTS'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cast<span class=\"token operator\">=</span>Csv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nDEFAULT_DBURL <span class=\"token operator\">=</span> <span class=\"token string\">'sqlite:///'</span> <span class=\"token operator\">+</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'db.sqlite3'</span><span class=\"token punctuation\">)</span>\nDATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'DATABASE_URL'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>DEFAULT_DBURL<span class=\"token punctuation\">,</span> cast<span class=\"token operator\">=</span>dburl<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first two lines import the module while the other just load the values using python-decouple lib. The <code class=\"language-text\">cast</code> parameter is mandatory because Python will treat the .env file content as string and it is important to cast the value to the proper data type.</p>\n<p>Pay attention to the <code class=\"language-text\">DEFAULT_DBURL</code> and <code class=\"language-text\">DATABASES</code> variables. The first uses an Sqlite in the local environment but in Heroku we will configure it to store the Postgres configuration url.</p>\n<h2>Deploying to Heroku</h2>\n<p>We have created our app in Heroku, attached a Postgres database and configured the settings to accept different configuration strings. Now it is time to deploy our application!</p>\n<h6>Make sure your requirements.txt file contains all dependencies</h6>\n<p>It must have, at least: <em>dj-database-url</em>, <em>gunicorn</em>, <em>psycopg2</em>, <em>python-decouple</em> and <em>pytz</em>. This file is extremely important because Heroku looks for the requirements file to install the dependencies.</p>\n<h6>Create a Procfile in the app root directory</h6>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">web: gunicorn <span class=\"token operator\">&lt;</span>app<span class=\"token operator\">></span>.wsgi --log-file -</code></pre></div>\n<p>A Procfile (yes, without any extension) tells Heroku how to run your application. Pay attention that <strong><app></strong> must be replaced by the directory your <strong>wsgi</strong> file is placed. Run the command locally to make sure it is correct.</p>\n<h6>Create runtime.txt in the app root directory</h6>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python-3.6.1</code></pre></div>\n<p>The file will tell to Heroku which version of python our project uses.</p>\n<h6>Configure your production env vars</h6>\n<p>Do you remember that our <strong>settings.py</strong> looks for an <strong>.env</strong> file? Well, <strong>python-decouple</strong> respect the environment variables precedence over <strong>config</strong> files. Thus, if there is an env var set in production the config directive will not look for an .env file.</p>\n<p>For each key in <em>.env</em> file we will use the <em>Heroku CLI</em> to set the env var in production. We need to setup four variables: <strong>SECRET_KEY</strong>, <strong>DEBUG</strong>, <strong>ALLOWED_HOSTS</strong> and <strong>DATABASE_URL</strong>. Open the terminal and execute:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">heroku config:set <span class=\"token assign-left variable\">SECRET_KEY</span><span class=\"token operator\">=</span><span class=\"token string\">'&lt;YOUR_SECRE_KEY>'</span> -a <span class=\"token operator\">&lt;</span>YOUR_APP<span class=\"token operator\">></span>\nheroku config:set <span class=\"token assign-left variable\">DEBUG</span><span class=\"token operator\">=</span>False -a <span class=\"token operator\">&lt;</span>YOUR_APP<span class=\"token operator\">></span>\nheroku config:set <span class=\"token assign-left variable\">ALLOWED_HOSTS</span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1,localhost,.herokuapp.com -a <span class=\"token operator\">&lt;</span>YOUR_APP<span class=\"token operator\">></span>\nheroku config:set <span class=\"token assign-left variable\">DATABASE_URL</span><span class=\"token operator\">=</span><span class=\"token string\">'&lt;YOUR_DATABASE_URL>'</span> -a <span class=\"token operator\">&lt;</span>YOUR_APP<span class=\"token operator\">></span></code></pre></div>\n<p><strong>Notes:</strong></p>\n<ol>\n<li>SECRET_KEY is surrounded by single quotes because we have to explicitly define it as a string to heroku;</li>\n<li>replace &#x3C;YOUR_APP> by your app name;</li>\n<li>the string <em>.herokuapp.com</em> must be in ALLOWED_HOSTS otherwise Django will not be executed in Heroku.</li>\n</ol>\n<p><strong>How to find the DATABASE_URL?</strong> Go to your app dashboard > Resources > Heroku Postgres Database. A new tab will open and allow you to check your DATABASE CREDENTIALS.</p>\n<h6>Deploy your app</h6>\n<p>In your Heroku app dashboard will contain instructions to deploy it. By using git you can deploy it easily:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">heroku git:remote -a <span class=\"token operator\">&lt;</span>YOUR_APP_NAME<span class=\"token operator\">></span>\n<span class=\"token function\">git</span> push heroku master</code></pre></div>\n<h2>Troubleshooting</h2>\n<p>If you face any problems just check the terminal because Heroku shows expressive messages that can help you. For example, during the deploy I got the message below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">remote:        django.core.exceptions.ImproperlyConfigured: You&#39;re using the staticfiles app without having set the STATIC_ROOT setting to a filesystem path.\nremote:\nremote:  !     Error while running &#39;$ python manage.py collectstatic --noinput&#39;.\nremote:        See traceback above for details.\nremote:</code></pre></div>\n<p>By checking that I realized I forgot to set the STATIC<em>ROOT variable in _settings.py</em> and install a WSGI middleware to provide the static files.</p>\n<p><strong>Note:</strong> Django is not meant to provide static files. Use AWS S3 to do that for production-ready projects.</p>\n<p>Thatâ€™s all folks!</p>","frontmatter":{"title":"Prepare your Django app to be deployed at Heroku","date":"Aug 15, 2017","description":null,"tags":["deploy","django","heroku","paas","python"],"rating":null,"image_url":null,"image_author":null},"fields":{"slug":"/2017/2017-08-15-Prepare_your_Django_app_to_be_deployed_at_Heroku/"},"timeToRead":5},"previous":{"fields":{"slug":"/2017/2017-08-21-Providing_static_files_in_your_Django_app_with_Amazon_S3/"},"frontmatter":{"title":"Providing static files in your Django app with Amazon S3"}},"next":{"fields":{"slug":"/2017/2017-08-04-Integrating_PyCharm_with_Pyenv/"},"frontmatter":{"title":"Integrating PyCharm with Pyenv"}}},"pageContext":{"id":"b10b4e1d-94f9-5516-aa0e-5be5010259d3","previousPostId":"ef7a27dd-994f-5a60-97c8-d32fe794b32d","nextPostId":"42ef6ebe-b56d-5c74-875d-173273cd0870","language":"en","intl":{"language":"en","languages":["en","pt"],"messages":{"of":"of","Next":"Next","Previous":"Previous","reading":"reading","Comments":"Comments","Featured_image_credits":"Featured image credits"},"routed":true,"originalPath":"/blog/2017/2017-08-15-Prepare_your_Django_app_to_be_deployed_at_Heroku/","redirect":true,"defaultLanguage":"en"}}},"staticQueryHashes":["2841359383"]}