{"componentChunkName":"component---src-templates-blog-post-js","path":"/pt/blog/2017/2017-05-07-Git_hooks_issue_tracker_e_Git_Flow/","result":{"data":{"site":{"siteMetadata":{"title":null,"siteUrl":"https://vcrmartinez.com","social":{"twitter":"vcrmartinez","github":"victormartinez","linkedin":"vcrmartinez","speakerdeck":"victormartinez"}}},"markdownRemark":{"id":"7fd05e74-a089-52a0-ae73-2a9b24aec71a","excerpt":"Na Agilize o fluxo comum de trabalho do desenvolvedor envolve o uso do Jira para gerenciamento das tarefas, Git & Git Flow para versionamento de código, Slack…","html":"<p>Na <a href=\"https://www.agilize.com.br/\">Agilize</a> o fluxo comum de trabalho do desenvolvedor envolve o uso do Jira para gerenciamento das tarefas, Git &#x26; Git Flow para versionamento de código, Slack para comunicação e ferramentas como IDE, Editor de Texto e Terminal. Basicamente, a sprint é mantida no Jira com cards que descrevem as funcionalidades, bugs, spikes e chores seguindo algumas convenções do SCRUM e, então, o programador atribui um card para si.</p>\n<p>Durante o fluxo de desenvolvimento existe uma convenção de que <strong>commits devem ter o código do card que o programador está trabalhando</strong>. Após alguns commits a convenção se torna chata de manter (pois você tem que digitar o código do card a todo momento). Existe uma forma de automatizar isso com Git Hooks.</p>\n<h2>Git Hooks</h2>\n<p>Git permite executir um script toda vez que um evento acontecer no repositório. Por exemplo, é possível configurar o editor de texto com uma mensagem de template que deve ser preenchida. Este <a href=\"https://www.atlassian.com/git/tutorials/git-hooks\">tutorial</a> explica o poder do Git Hooks e disponibiliza um trecho de código que será customizado neste post para endereçar nossas necessidades.</p>\n<p>Dentro do nosso repositório existe um diretório <em>.git/hooks</em> que contém alguns scripts de exemplo que podem ser usados como playground. Eles terminam com <em>.sample</em> para não serem interpretados pelo Git.</p>\n<p>Crie um arquivo chamado <em>prepare-commit-msg</em> que vai conter o código abaixo para automatizar a mensagem de commit.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env python3</span>\n<span class=\"token function\">import</span> sys, os, re\nfrom subprocess <span class=\"token function\">import</span> check_output\n\n<span class=\"token comment\"># Setup</span>\nbranch_regex <span class=\"token operator\">=</span> r<span class=\"token string\">'.+/(AGZ-\\d+).*'</span>\n\n<span class=\"token comment\"># Collect the parameters</span>\ncommit_msg_filepath <span class=\"token operator\">=</span> sys.argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Figure out which branch we're on</span>\nbranch <span class=\"token operator\">=</span> check_output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'git'</span>, <span class=\"token string\">'symbolic-ref'</span>, <span class=\"token string\">'--short'</span>, <span class=\"token string\">'HEAD'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>.strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Populate the commit message with the issue #, if there is one</span>\nissue_match <span class=\"token operator\">=</span> re.match<span class=\"token punctuation\">(</span>branch_regex, branch.decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>, re.M<span class=\"token operator\">|</span>re.I<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> issue_match:\n    issue_code <span class=\"token operator\">=</span> issue_match.group<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    with open<span class=\"token punctuation\">(</span>commit_msg_filepath, <span class=\"token string\">'r+'</span><span class=\"token punctuation\">)</span> as f:\n        content <span class=\"token operator\">=</span> f.read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        f.seek<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        f.write<span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s\"</span> % <span class=\"token punctuation\">(</span>issue_code, content<span class=\"token punctuation\">))</span></code></pre></div>\n<p>Depois de executar <em>git commit</em> o arquivo acima será executado para popular a mensagem de commit e, então, permitir-nos adotar o template nos nossos commits. O script é chamado com três argumentos:</p>\n<ol>\n<li>Nome do arquivo</li>\n<li>O nome de um arquivo temporário que vai conter a mensagem</li>\n<li>O tipo do commit</li>\n<li>O hash SHA1 do commit</li>\n</ol>\n<p>Na Agilize o código do card segue a regex na linha 6. Como usamos o <a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">gitflow</a> para gerenciar as branches, elas sempre seguirão alguns padrões como <em>feature/AGZ-1256</em>, <em>hotfix/AGZ-981</em>, <em>release/AGZ-453</em>. Portanto, commits não são criados nas branch master ou dev. Devido a isso, a variável na linha 6 define a regex que irá usar o nome da branch para criar nossa mensagem de commit. Se você quiser aplicar isso para a sua empresa basta atualizar a regex (veja a linha 17).</p>\n<p>As linhas 15 e 16 checam se a branch atual não é master / dev e contém o código do card. As linhas finais apenas criam a mensagem com o código.</p>\n<p><strong>Obs:</strong></p>\n<p>Ao fazer commit o cursor geralmente começa no início da linha mas você pode fazer com que o cursor comece imediatamente depois da mensagem de template. Apenas adicione o trecho de código abaixo ao seu arquivo <em>.bashrc</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GIT_EDITOR</span><span class=\"token operator\">=</span><span class=\"token string\">\"vim -c'startinsert|norm! ggA'\"</span></code></pre></div>\n<h4>Referências</h4>\n<ol>\n<li><a href=\"https://www.atlassian.com/git/tutorials/git-hooks\">Git hooks</a></li>\n<li><a href=\"http://stackoverflow.com/questions/41232722/open-git-commit-editor-to-specific-cursor-location\">Open git commit editor to specific cursor location</a></li>\n</ol>","frontmatter":{"title":"Git hooks, issue tracker e Git Flow","date":"2017-05-07T00:00:00.000Z","description":null,"tags":["git","gitflow","hooks"],"rating":null,"image_url":null,"image_author":null,"image":{"publicURL":"/static/4417e49835781d91e8b3e5ba9d3d5768/featured.png"}},"fields":{"slug":"/2017/2017-05-07-Git_hooks_issue_tracker_e_Git_Flow/"},"timeToRead":3}},"pageContext":{"id":"7fd05e74-a089-52a0-ae73-2a9b24aec71a","language":"pt","intl":{"language":"pt","languages":["en","pt"],"messages":{"of":"de","or":"ou","Next":"Próximo","Previous":"Anterior","reading":"leitura","Comments":"Comentários","Featured_image_credits":"Créditos da imagem de destaque","Not_Found":"Não Encontrado","Not_Found_Text":"A página que você está procurando pode ter sido removida, ter seu nome alterado ou estar temporariamente indisponível.","Not_Found_Nav":"Você pode ir para","Warning_deprecated":"Atenção: esse post foi escrito a algum tempo e pode não ser mais válido, ok?"},"routed":true,"originalPath":"/blog/2017/2017-05-07-Git_hooks_issue_tracker_e_Git_Flow/","redirect":true,"defaultLanguage":"en"}}},"staticQueryHashes":["4061151221"]}