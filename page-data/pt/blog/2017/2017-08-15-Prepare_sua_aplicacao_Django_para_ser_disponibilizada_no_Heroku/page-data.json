{"componentChunkName":"component---src-templates-blog-post-js","path":"/pt/blog/2017/2017-08-15-Prepare_sua_aplicacao_Django_para_ser_disponibilizada_no_Heroku/","result":{"data":{"site":{"siteMetadata":{"title":null,"siteUrl":"https://vcrmartinez.com","social":{"twitter":"vcrmartinez","github":"victormartinez","linkedin":"vcrmartinez","speakerdeck":"victormartinez"}}},"markdownRemark":{"id":"100126fa-1470-53b3-8b15-749c78c8d86e","excerpt":"É bem animador construir nossos próprios projetos e vê-los funcionar em produção, certo? Alguns desenvolvedores podem pensar que fazer o deploy de uma aplicação…","html":"<p>É bem animador construir nossos próprios projetos e vê-los funcionar em produção, certo? Alguns desenvolvedores podem pensar que fazer o deploy de uma aplicação Django é um pesadelo. Neste post eu vou mostrar como preparar sua aplicação para ter diferentes configurações e efetuar o deploy no Heroku.</p>\n<p><strong>Requisitos:</strong> Você precisa instalar o <a href=\"https://devcenter.heroku.com/articles/heroku-cli\">Heroku CLI</a> e o <strong>GIT</strong>.</p>\n<h2>Heroku</h2>\n<p><a href=\"http://www.heroku.com\">Heroku</a> é um PaaS (Plataforma como Serviço) que vai disponibilizar nosso projeto na web. É preciso que você acesse o <a href=\"https://dashboard.heroku.com/apps\">dashboard</a> e crie uma nova aplicação.</p>\n<p>Um vez criada sua aplicação, é necessário usar o terminal para configurar as credenciais. Para isso, usamos o Heroku CLI para acessar as configurações do app (dê uma olhada na <a href=\"https://devcenter.heroku.com/articles/heroku-cli\">docs</a> para instalar propriamente).</p>\n<p>Após a instalação você pode efetuar o login e já adicionar um banco Postgres à sua aplicação:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">heroku login\nheroku addons:create heroku-postgresql:<span class=\"token operator\">&lt;</span>your-plan-name<span class=\"token operator\">></span> -a <span class=\"token operator\">&lt;</span>your-application-name<span class=\"token operator\">></span></code></pre></div>\n<p>Mais tarde usaremos o Postgres. Heroku nos ajuda a provisionar um banco de dados com um comando. É bem fácil e você pode aprender sobre isso na <a href=\"https://devcenter.heroku.com/articles/heroku-postgresql#provisioning-heroku-postgres\">docs</a>.</p>\n<p><strong>Dica:</strong> O comando <code class=\"language-text\">$ heroku apps</code> é bem útil e nos permite listar os apps que temos.</p>\n<h2>Preparando nossa aplicação</h2>\n<p>Quando se trata de gerenciar os ambientes local e de produção eu gosto de usar o <a href=\"https://github.com/henriquebastos/python-decouple\">python decouple</a> pois ele permite gerenciar as variáveis de ambiente e, com isso, ter diferentes configurações. Além dele, eu uso o <a href=\"https://github.com/kennethreitz/dj-database-url\">dj<em>database</em>url</a> para tornar simples o uso de diferentes bancos de dados por meio de strings de configuração.</p>\n<p>1. Primeiro, crie dois arquivos: <em>.env</em> e <em>.env-sample</em>. O primeiro será usado no nosso ambiente local e deve ser ignorado pelo GIT. O segundo funciona como um template:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">SECRET_KEY</span><span class=\"token operator\">=</span>YOUR_KEY_GOES_HERE\n<span class=\"token assign-left variable\">DEBUG</span><span class=\"token operator\">=</span>True\n<span class=\"token assign-left variable\">ALLOWED_HOSTS</span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1,localhost,.herokuapp.com</code></pre></div>\n<p>2. Abra seu <em>settings.py</em>, e cole o código abaixo:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> decouple <span class=\"token keyword\">import</span> config<span class=\"token punctuation\">,</span> Csv\n<span class=\"token keyword\">from</span> dj_database_url <span class=\"token keyword\">import</span> parse <span class=\"token keyword\">as</span> dburl\n\nSECRET_KEY <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'SECRET_KEY'</span><span class=\"token punctuation\">)</span>\nDEBUG <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'DEBUG'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> cast<span class=\"token operator\">=</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n\nALLOWED_HOSTS <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'ALLOWED_HOSTS'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cast<span class=\"token operator\">=</span>Csv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nDEFAULT_DBURL <span class=\"token operator\">=</span> <span class=\"token string\">'sqlite:///'</span> <span class=\"token operator\">+</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'db.sqlite3'</span><span class=\"token punctuation\">)</span>\nDATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'DATABASE_URL'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>DEFAULT_DBURL<span class=\"token punctuation\">,</span> cast<span class=\"token operator\">=</span>dburl<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As primeiras duas linhas importam os módulos enquanto as outras apenas carregam as variáveis de ambiente. O parâmetro <code class=\"language-text\">cast</code> é obrigatório pois variáveis de ambiente são strings e é importante converter o valor para o tipo de dado correto.</p>\n<p>Preste atenção às variáveis <code class=\"language-text\">DEFAULT_DBURL</code> e <code class=\"language-text\">DATABASES</code>. A primeira usa o Sqlite no ambiente local mas no Heroku nós iremos configurá-la para armazenar a URL de configuração do Postgres.</p>\n<h2>Subindo para o Heroku</h2>\n<p>Nós criamos nossa aplicação no Heroku, adicionamos um banco de dados Postgres e configuramos o projeto para aceitar diferentes strings de configuração. Agora é hora de disponibilizar nossa aplicação!</p>\n<h6>Certifique-se de que seu arquivo requirements.txt contém todas as dependências</h6>\n<p>Ele deve ter, ao menos: <em>dj-database-url</em>, <em>gunicorn</em>, <em>psycopg2</em>, <em>python-decouple</em> e <em>pytz</em>. Esse arquivo é extremamente importante pois o Heroku olha para ele a fim de instalar as dependências.</p>\n<h6>Crie um arquivo Procfile no diretório raiz</h6>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">web: gunicorn <span class=\"token operator\">&lt;</span>app<span class=\"token operator\">></span>.wsgi --log-file -</code></pre></div>\n<p>O Procfile (sim, o arquivo não tem extensão) informa ao Heroku como executar a aplicação. Atente que <strong><app></strong> deve ser substituído pelo diretório que está o seu arquivo <strong>wsgi</strong>. Você pode executar o comando localmente para certificar-se de que está correto.</p>\n<h6>Crie um arquivo runtime.txt no diretório raiz</h6>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python-3.6.1</code></pre></div>\n<p>O arquivo vai dizer ao Heroku qual versão do python nosso projeto usa.</p>\n<h6>Configure suas variáveis de ambiente de produção</h6>\n<p>Lembra que nosso <strong>settings.py</strong> carrega os dados do arquivo <strong>.env</strong>? Bem, <strong>python-decouple</strong> respeita a precedência das variáveis de ambiente em relação aos arquivos de configuração. Portanto, se existir alguma variável de ambiente em produção a diretiva <em>config</em> não irá olhar para o arquivo .env.</p>\n<p>Para cada chave no arquivo <em>.env</em> nós iremos usar o <em>Heroku CLI</em> para configurar a variável de ambiente em produção. Nós precisamos configurar quatro variáveis: <strong>SECRET_KEY</strong>, <strong>DEBUG</strong>, <strong>ALLOWED_HOSTS</strong> e <strong>DATABASE_URL</strong>. Abra o terminar e execute:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">heroku config:set <span class=\"token assign-left variable\">SECRET_KEY</span><span class=\"token operator\">=</span><span class=\"token string\">'&lt;YOUR_SECRE_KEY>'</span> -a <span class=\"token operator\">&lt;</span>YOUR_APP<span class=\"token operator\">></span>\nheroku config:set <span class=\"token assign-left variable\">DEBUG</span><span class=\"token operator\">=</span>False -a <span class=\"token operator\">&lt;</span>YOUR_APP<span class=\"token operator\">></span>\nheroku config:set <span class=\"token assign-left variable\">ALLOWED_HOSTS</span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1,localhost,.herokuapp.com -a <span class=\"token operator\">&lt;</span>YOUR_APP<span class=\"token operator\">></span>\nheroku config:set <span class=\"token assign-left variable\">DATABASE_URL</span><span class=\"token operator\">=</span><span class=\"token string\">'&lt;YOUR_DATABASE_URL>'</span> -a <span class=\"token operator\">&lt;</span>YOUR_APP<span class=\"token operator\">></span></code></pre></div>\n<p><strong>Notas:</strong></p>\n<ol>\n<li>SECRET_KEY é cercado por aspas simples pois precisamos explicitamente definí-la como uma string para o Heroku;</li>\n<li>Substitua &#x3C;YOUR_APP> pelo nome da sua aplicação;</li>\n<li>A string <em>.herokuapp.com</em> deve estar dentro de <em>ALLOWED</em>HOSTS_, caso contrário o Django não será executado no Heroku.</li>\n</ol>\n<p><strong>Como encontrar DATABASE_URL?</strong> Acesse o dashboard > Resources > Heroku Postgres Database. Uma nova aba irá abrir e permitirá você verificar <em>DATABASE CREDENTIALS</em>.</p>\n<h6>Disponibilize seu app</h6>\n<p>O dashboard do Heroku irá conter instruções de como disponibilizar seu app. De qualquer maneira, com o git você pode fazê-lo facilmente:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">heroku git:remote -a <span class=\"token operator\">&lt;</span>YOUR_APP_NAME<span class=\"token operator\">></span>\n<span class=\"token function\">git</span> push heroku master</code></pre></div>\n<h2>Solução de Problemas</h2>\n<p>Se você encontrar quaisquer problemas, apenas cheque o terminal pois o Heroku apresenta mensagens expressivas que podem te ajudar. Por exemplo, durante o deploy eu fui apresentado à seguinte mensagem:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">remote:        django.core.exceptions.ImproperlyConfigured: You&#39;re using the staticfiles app without having set the STATIC_ROOT setting to a filesystem path.\nremote:\nremote:  !     Error while running &#39;$ python manage.py collectstatic --noinput&#39;.\nremote:        See traceback above for details.\nremote:</code></pre></div>\n<p>Ao checá-la percebi que havia esquecido de configurar a variável <em>STATIC ROOT</em> no arquivo <em>\\</em>settings.py_ e instalar o middleware WSGI para servir os arquivos estáticos.</p>\n<p><strong>Nota:</strong> Django não foi pensado para servir arquivos estáticos. Use a Amazon S3 (ou equivalente) em projetos “reais”.</p>\n<p>Isso é tudo, pessoal!</p>","frontmatter":{"title":"Prepare sua aplicação Django para ser disponibilizada no Heroku","date":"2017-08-15T00:00:00.000Z","description":null,"tags":["deploy","django","heroku","paas","python"],"rating":null,"image_url":null,"image_author":null,"image":{"publicURL":"/static/9d3813365c15ebf9f64ed57b5575ada5/featured.png"}},"fields":{"slug":"/2017/2017-08-15-Prepare_sua_aplicacao_Django_para_ser_disponibilizada_no_Heroku/"},"timeToRead":5}},"pageContext":{"id":"100126fa-1470-53b3-8b15-749c78c8d86e","language":"pt","intl":{"language":"pt","languages":["en","pt"],"messages":{"of":"de","or":"ou","Next":"Próximo","Previous":"Anterior","reading":"leitura","Comments":"Comentários","Featured_image_credits":"Créditos da imagem de destaque","Not_Found":"Não Encontrado","Not_Found_Text":"A página que você está procurando pode ter sido removida, ter seu nome alterado ou estar temporariamente indisponível.","Not_Found_Nav":"Você pode ir para","Warning_deprecated":"Atenção: esse post foi escrito a algum tempo e pode não ser mais válido, ok?"},"routed":true,"originalPath":"/blog/2017/2017-08-15-Prepare_sua_aplicacao_Django_para_ser_disponibilizada_no_Heroku/","redirect":true,"defaultLanguage":"en"}}},"staticQueryHashes":["4061151221"]}