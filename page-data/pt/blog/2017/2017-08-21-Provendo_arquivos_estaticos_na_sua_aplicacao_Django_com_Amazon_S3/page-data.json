{"componentChunkName":"component---src-templates-blog-post-js","path":"/pt/blog/2017/2017-08-21-Provendo_arquivos_estaticos_na_sua_aplicacao_Django_com_Amazon_S3/","result":{"data":{"site":{"siteMetadata":{"title":null,"siteUrl":"https://vcrmartinez.com","social":{"twitter":"vcrmartinez","github":"victormartinez","linkedin":"vcrmartinez","speakerdeck":"victormartinez"}}},"markdownRemark":{"id":"642ef38a-db4d-53dd-9763-fe651342ff05","excerpt":"É sabido que Django não provê arquivos estáticos. Usar um middleware WSGI para endereçar essa questão não é o jeito correto de servir arquivos estáticos e…","html":"<p>É sabido que Django não provê arquivos estáticos. Usar um middleware WSGI para endereçar essa questão não é o jeito correto de servir arquivos estáticos e, portanto, este post apresenta como você pode fazer isso usando a Amazon S3.</p>\n<h3>Django backend storages</h3>\n<p>Django usa uma arquitetura de <em>backend storages</em> para armazenar dados (<em>e.g.</em> <a href=\"https://docs.djangoproject.com/en/1.11/ref/files/storage/\">FileSystemStorage</a> é responsável por salvar arquivos no sistema de arquivos). Entretanto, você pode querer adotar uma abordagem diferente e, assim, implementar a <a href=\"https://docs.djangoproject.com/en/1.11/howto/custom-file-storage/\">Storage Interface</a> permite criar a sua própria estratégia. Um projeto chamado <a href=\"https://github.com/jschneier/django-storages\">django-storages</a> já pensou nesses problemas e implementou um armazenamento que envia os arquivos para a Amazon S3 com praticamennte zero esforço. Vamos usá-lo!</p>\n<h3>Criando um bucket na Amazon S3</h3>\n<p>Acesse a Amazon S3, crie um bucket com dois diretórios dentro: <em>static</em> e <em>media</em>. Neste exemplo assumiremos que a listagem dos objetos no S3 é pública.</p>\n<p><strong>Nota:</strong> Neste post nós falamos sobre diretórios mas é apenas uma abstração para facilitar o entendimento. A <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/UG/FolderOperations.html\">documentação do S3</a> explica que <em>buckets</em> e objetos são os recursos primários e que não existe a hierarquia que ocorre em um sistema de arquivos convencional.</p>\n<h3>Instalação e requisitos</h3>\n<p>Você vai precisar instalar o <a href=\"https://github.com/boto/boto3\">boto</a> e o <a href=\"https://github.com/jschneier/django-storages\">django-storages</a>. Como explicado anteriormente, <em>django-storages</em> vai nos ajudar a enviar arquivos para a Amazon S3. Entretanto, nós precisamos instalar o <em>boto</em> pois ele é responsável por conectar com os serviços da Amazon.</p>\n<p><strong>Nota:</strong> Este post usa <a href=\"https://github.com/henriquebastos/python-decouple\">python-decouple</a> para gerenciar o ambiente local. Se você não sabe como dê uma olhada neste <a href=\"/pt/blog/2017/2017-08-15-Prepare_sua_aplicacao_Django_para_ser_disponibilizada_no_Heroku\">post</a>.</p>\n<h3>Criando nosssos backends customizados</h3>\n<p>No nosso diretório de configuração nós vamos criar os backends responsáveis por lidar com a Amazon S3. Crie um arquivo chamado <em>s3util.py</em> e adicione o conteúdo abaixo:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf <span class=\"token keyword\">import</span> settings\n<span class=\"token keyword\">from</span> storages<span class=\"token punctuation\">.</span>backends<span class=\"token punctuation\">.</span>s3boto <span class=\"token keyword\">import</span> S3BotoStorage\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticStorage</span><span class=\"token punctuation\">(</span>S3BotoStorage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    location <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>STATICFILES_LOCATION\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MediaStorage</span><span class=\"token punctuation\">(</span>S3BotoStorage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    location <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>MEDIAFILES_LOCATION</code></pre></div>\n<ul>\n<li>Linhas 1-2: Importa os módulos.</li>\n<li>Linhas 5-10: Representa nossos storages. O atributo <code class=\"language-text\">location</code> é configurado para armazenar a localização dos arquivos <em>static</em> e <em>media</em> definidos no arquivo <em>settings.py</em>.</li>\n</ul>\n<h3>Configurando as variáveis da Amazon S3</h3>\n<p>Assumindo que você já tem um bucket disponível, vamos adicionar algumas variáveis ao arquivo <em>settings.py</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> decouple <span class=\"token keyword\">import</span> config\n\n<span class=\"token comment\"># AWS</span>\nAWS_S3_SECURE_URLS <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\nAWS_QUERYSTRING_AUTH <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\nAWS_PRELOAD_METADATA <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\nAWS_STORAGE_BUCKET_NAME <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;YOUR-BUCKET-NAME>'</span>\nAWS_ACCESS_KEY_ID <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'AWS_ACCESS_KEY_ID'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\nAWS_SECRET_ACCESS_KEY <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'AWS_SECRET_ACCESS_KEY'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\nSTATICFILES_STORAGE <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'STATICFILES_STORAGE'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'django.contrib.staticfiles.storage.StaticFilesStorage'</span><span class=\"token punctuation\">)</span>\nDEFAULT_FILE_STORAGE <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'DEFAULT_FILE_STORAGE'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'django.core.files.storage.FileSystemStorage'</span><span class=\"token punctuation\">)</span>\n\nSTATIC_URL <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'STATIC_URL'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'/static/'</span><span class=\"token punctuation\">)</span>\nMEDIA_URL <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'MEDIA_URL'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'/media/'</span><span class=\"token punctuation\">)</span>\n\nAWS_HEADERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'x-amz-acl'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'public-read'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'public, max-age=31556926'</span>\n<span class=\"token punctuation\">}</span>\n\nSTATICFILES_LOCATION <span class=\"token operator\">=</span> <span class=\"token string\">'static'</span>\nMEDIAFILES_LOCATION <span class=\"token operator\">=</span> <span class=\"token string\">'media'</span></code></pre></div>\n<ul>\n<li>Linha 1: Certifique-se de importar o módulo de configuração. Ele vai procurar as variáveis de ambiente ou um arquivo <code class=\"language-text\">.env</code>.</li>\n<li>Linha 4: Use urls com SSL para servir os objetos do S3.</li>\n<li>Linha 5: Nós não queremos gerar uma querystring de autenticação para o S3.</li>\n<li>Linha 6: Queremos fazer o pré-carregamento de metadados do S3.</li>\n<li>Linha 7: É necessário fornecer o nome do bucket.</li>\n<li>Linhas 8-9: <code class=\"language-text\">config</code> vai procurar pelas variáveis de ambiente ou por um arquivo <code class=\"language-text\">.env</code>. No ambiente local elas estarão em branco pois não enviaremos para o S3. Entretanto, em produção nós iremos configurar essas variáveis.</li>\n<li>Linhas 11-12: Essas variáveis irão explicitamente definir qual storage nosso projeto vai utilizar para armazenar os arquivos estáticos. No ambiente local será o backend comum (StaticFilesStorage e FileSystemStorage). Entretanto, em produção, iremos deixar configurado os backends responsáveis por enviar os arquivos para o S3.</li>\n<li>Linhas 14-15: Aponta para as URLs de arquivos estáticos e mídias. Em produção eles vão armazenar a URL da Amazon S3 que corresponde a cada tipo de arquivo.</li>\n<li>Linhas 17-20: Cabeçalhos AWS que explicitam a política de cache.</li>\n<li>Linhas 22-23: Variáveis que informam nosso backend onde encontrar os arquivos de mídia e estáticos. Elas são usadas no arquivo <em>s3utils.py</em>.</li>\n</ul>\n<h3>Variáveis Locais</h3>\n<p>Em resumo, nossas variáveis locais vão acabar sendo:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">AWS_S3_SECURE_URLS <span class=\"token operator\">=</span> True\nAWS_QUERYSTRING_AUTH <span class=\"token operator\">=</span> False\nAWS_PRELOAD_METADATA <span class=\"token operator\">=</span> True\nAWS_STORAGE_BUCKET_NAME <span class=\"token operator\">=</span> <span class=\"token string\">'BUCKET-NAME'</span>\nAWS_ACCESS_KEY_ID <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\nAWS_SECRET_ACCESS_KEY <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n\nSTATICFILES_STORAGE <span class=\"token operator\">=</span> <span class=\"token string\">'django.contrib.staticfiles.storage.StaticFilesStorage'</span>\nDEFAULT_FILE_STORAGE <span class=\"token operator\">=</span> <span class=\"token string\">'django.core.files.storage.FileSystemStorage'</span>\n\nSTATIC_URL <span class=\"token operator\">=</span> <span class=\"token string\">'/static/'</span>\nMEDIA_URL <span class=\"token operator\">=</span> <span class=\"token string\">'/media/'</span>\n\nAWS_HEADERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'x-amz-acl'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'public-read'</span>,\n    <span class=\"token string\">'Cache-Control'</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">'public, max-age=31556926'</span>\n<span class=\"token punctuation\">}</span>\n\nSTATICFILES_LOCATION <span class=\"token operator\">=</span> <span class=\"token string\">'static'</span>\nMEDIAFILES_LOCATION <span class=\"token operator\">=</span> <span class=\"token string\">'media'</span></code></pre></div>\n<h3>Variáveis de Produção</h3>\n<p>É necessário configurar as variáveis de produção:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">heroku config:set <span class=\"token assign-left variable\">AWS_ACCESS_KEY_ID</span><span class=\"token operator\">=</span><span class=\"token string\">'&lt;YOUR-ACCESS-KEY>'</span> <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">&lt;</span>YOUR_APP<span class=\"token operator\">></span>\nheroku config:set <span class=\"token assign-left variable\">AWS_SECRET_ACCESS_KEY</span><span class=\"token operator\">=</span><span class=\"token string\">'&lt;YOUR-SECRET-KEY>'</span> <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">&lt;</span>YOUR_APP<span class=\"token operator\">></span>\nheroku config:set <span class=\"token assign-left variable\">DEFAULT_FILE_STORAGE</span><span class=\"token operator\">=</span><span class=\"token string\">'config.s3util.MediaStorage'</span> <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">&lt;</span>YOUR_APP<span class=\"token operator\">></span>\nheroku config:set <span class=\"token assign-left variable\">STATICFILES_STORAGE</span><span class=\"token operator\">=</span><span class=\"token string\">'config.s3util.StaticStorage'</span> <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">&lt;</span>YOUR_APP<span class=\"token operator\">></span>\nheroku config:set <span class=\"token assign-left variable\">MEDIA_URL</span><span class=\"token operator\">=</span><span class=\"token string\">'https://s3.amazonaws.com/&lt;YOUR-BUCKET-NAME>/media/'</span> <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">&lt;</span>YOUR_APP<span class=\"token operator\">></span>\nheroku config:set <span class=\"token assign-left variable\">STATIC_URL</span><span class=\"token operator\">=</span><span class=\"token string\">'https://s3.amazonaws.com/&lt;YOUR-BUCKET-NAME>/static/'</span> <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">&lt;</span>YOUR_APP<span class=\"token operator\">></span></code></pre></div>\n<p><strong>Nota:</strong> Você pode passar múltiplas variáveis em apenas uma declaração:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">heroku config:set <span class=\"token assign-left variable\">AWS_ACCESS_KEY_ID</span><span class=\"token operator\">=</span><span class=\"token string\">'&lt;YOUR-ACCESS-KEY>'</span> <span class=\"token assign-left variable\">AWS_SECRET_ACCESS_KEY</span><span class=\"token operator\">=</span><span class=\"token string\">'&lt;YOUR-SECRET-KEY>'</span> <span class=\"token punctuation\">..</span>. <span class=\"token parameter variable\">-a</span> <span class=\"token operator\">&lt;</span>YOUR_APP<span class=\"token operator\">></span></code></pre></div>\n<h3>Enviando arquivos para o S3</h3>\n<p>De agora em diante, toda vez que você disponibilizar seu projeto no Heroku ele vai enviar os arquivos para a Amazon S3. Isso vai acontecer pois o Heroku executa <code class=\"language-text\">$ python manage.py collectstatic</code> durante o pipeline de deploy e esse comando coleta os arquivos estáticos e salva-os. Nosso backend de produção salva no S3 todos os arquivos.</p>\n<p>Se você não estiver usando Heroku certifique-se de executar <code class=\"language-text\">python manage.py collectstatic</code> em produção.</p>\n<p><strong>Nota:</strong> Um teste pode ser feito ao configurar as variáveis de produção no ambiente local. Dessa forma, se você executar o comando <code class=\"language-text\">collectstatic</code> ele irá enviar os arquivos para o S3. Apenas certifique-se de removê-las após testar.</p>","frontmatter":{"title":"Provendo arquivos estáticos na sua aplicação Django com Amazon S3","date":"2017-08-21T00:00:00.000Z","description":null,"tags":["aws","django","python","s3","storage"],"image_url":null,"image_author":null,"image":{"publicURL":"/static/97e4f21b758d01cda99b9edc9ff96b8f/featured.png"}},"fields":{"slug":"/2017/2017-08-21-Provendo_arquivos_estaticos_na_sua_aplicacao_Django_com_Amazon_S3/"},"timeToRead":5}},"pageContext":{"id":"642ef38a-db4d-53dd-9763-fe651342ff05","language":"pt","intl":{"language":"pt","languages":["pt"],"messages":{"of":"de","or":"ou","Next":"Próximo","Previous":"Anterior","reading":"leitura","Comments":"Comentários","Featured_image_credits":"Créditos da imagem de destaque","Not_Found":"Não Encontrado","Not_Found_Text":"A página que você está procurando pode ter sido removida, ter seu nome alterado ou estar temporariamente indisponível.","Not_Found_Nav":"Você pode ir para","Warning_deprecated":"Atenção: esse post foi escrito a algum tempo e pode não ser mais válido, ok?"},"routed":true,"originalPath":"/blog/2017/2017-08-21-Provendo_arquivos_estaticos_na_sua_aplicacao_Django_com_Amazon_S3/","redirect":true,"defaultLanguage":"pt"}}},"staticQueryHashes":["4061151221"]}