{"componentChunkName":"component---src-templates-blog-post-js","path":"/pt/blog/2019/2019-05-18-Criando_scripts_de_linha_de_comando_a_prova_de_balas/","result":{"data":{"site":{"siteMetadata":{"title":null,"siteUrl":"https://vcrmartinez.com","social":{"twitter":"vcrmartinez","github":"victormartinez","linkedin":"vcrmartinez","speakerdeck":"victormartinez"}}},"markdownRemark":{"id":"4dd76a2a-84a7-559b-a41e-73df0f6b36e8","excerpt":"A vida de um desenvolvedor back-end envolve a criação de alguns scripts para serem executados no ambiente de produção. Por exemplo, você pode precisar atualizar…","html":"<p>A vida de um desenvolvedor back-end envolve a criação de alguns scripts para serem executados no ambiente de produção. Por exemplo, você pode precisar atualizar muitos registros de uma vez, acionar eventos ou corrigir um bug específico. <em>O que eles têm em comum?</em> Se não forem projetados corretamente, podem causar um efeito colateral muito ruim na aplicação, arruinar a experiência do usuário, etc.</p>\n<p>No cenário do mundo real, algumas mudanças são ~praticamente~ impossíveis de reverter:</p>\n<ol>\n<li>Acionar e-mails / notificações / mensagens / SMSs para clientes</li>\n<li>Fornecer, acidentalmente, um desconto a um usuário (ou muitos)</li>\n<li>Atualizar de registros sem backup</li>\n</ol>\n<p>Como desenvolvedores, precisamos não apenas verificar novamente nossos scripts, mas também fazer o nosso melhor para minimizar / evitar possíveis efeitos colaterais (especialmente se algo inesperado acontecer). Algumas semanas atrás, durante uma sessão pair programming, [Elias] (<a href=\"https://etandel.xyz\">https://etandel.xyz</a>) e eu criamos um crítico <a href=\"https://docs.djangoproject.com/en/2.2/howto/custom-management-command/\">comando Django</a> responsável por alterar registros em muitas tabelas de acordo com uma lógica de negócios. À medida que mergulhávamos nas partes intrínsecas do script, percebemos o quão perigoso isso poderia ser e tomamos alguns cuidados que são compartilhados neste post.</p>\n<h2>Barras de progresso são fantásticas!</h2>\n<p>Executar um script que leva muito tempo para ser concluído é desesperador. Você fica confuso porque não sabe o que está acontecendo: (i) ainda está funcionando? (ii) a conexão está desligada? É por isso que um senso de progresso é importante. Se você é um programador Python, alguns projetos como <a href=\"https://github.com/tqdm/tqdm\">tqdm</a> e <a href=\"https://github.com/kennethreitz/clint\">clint</a> podem ajudá-lo fornecendo maneiras de criar barras de progresso. De qualquer forma, se isso exigir muito esforço ou se sua linguagem de programação não ajudar você com isso, um simples indicador <code class=\"language-text\">&lt;accomplished&gt; / &lt;total&gt;</code> é um bom começo, pelo menos.</p>\n<h2>Logging</h2>\n<p>Depois de executar um script, as coisas acontecem:</p>\n<ol>\n<li>Você não tem certeza do que foi feito; Alguns dias depois, como você se lembra?</li>\n<li>Você não terá 100% de certeza sobre os registros que foram atualizados;</li>\n<li>Qualquer reversão exigirá um backup específico;</li>\n</ol>\n<p>Além disso, pense no cenário em que seu script tem um bug inesperado ou os registros que você atualiza não estão consistentemente alinhados à lógica de negócios. <em>Quão fácil é reverter os efeitos colaterais?</em></p>\n<p>Toda dor acima mencionada pode ser atenuada se você simplesmente registrar as alterações. Você pode criar um arquivo simples que armazena: (i) a id dos registros que você atualizou; (ii) o valor da coluna anterior; (iii) o novo valor. Dessa forma, se algo inesperado acontecer, você pode facilmente analisar o log, obter os registros que alterou e definir os valores antigos de volta sem ter que carregar um backup.</p>\n<h2>Auto-verificação</h2>\n<p>E se o seu script pudesse verificar inconsistências durante a execução? Pouco antes da conclusão, ele pode analisar o log e verificar se os novos registros são consistentes com a lógica de negócios.</p>\n<p>Vamos supor, por exemplo, que você precise multiplicar o saldo de vários usuários por um fator. Como você é cauteloso, seu script produz o seguinte registro:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">id; antigo; novo\n10987; 10; 100\n98011; 5; 50\n87652; 3; 35</code></pre></div>\n<p>O último registro não está correto porque o novo saldo ultrapassa em 5 o valor esperado (30). Nesse caso, uma exceção pode ser lançada para reverter todas as alterações.</p>\n<h2>Rollback</h2>\n<p>Especialmente ao lidar com registros de banco de dados, você deve garantir que uma política de tudo-ou-nada seja seguida: ou todas as alterações são persistidas ou nada é feito. Use uma transação de banco de dados para fazer isso, pois no caso de qualquer erro o rollback será executado.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@transaction<span class=\"token punctuation\">.</span>atomic</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">&lt;</span>your_code_goes_here<span class=\"token operator\">></span></code></pre></div>\n<h2>Dry-run</h2>\n<p>Sempre que possível, forneça uma opção <code class=\"language-text\">dry-run</code>. Dessa forma as alterações não são confirmadas e é possível verificar se há erros no tempo de execução. Se você usa o framework Django, por exemplo, seu comando pode reverter todas as mudanças se <code class=\"language-text\">dry-run</code> for passado como argumento:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@transaction<span class=\"token punctuation\">.</span>atomic</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dry_run <span class=\"token operator\">=</span> kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">'dry_run'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> dry_run<span class=\"token punctuation\">:</span>\n        transaction<span class=\"token punctuation\">.</span>set_rollback<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Tmux</h2>\n<p>E se sua conexão for perdida durante a execução? Isso pode ser muito ruim, hein? É por isso que é recomendado usar um multiplexador de Terminal como o tmux (dá uma olhada neste <a href=\"https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/\">tutorial</a>). É realmente útil porque você pode iniciar tarefas de longa execução em seu servidor remoto e mantê-las em execução mesmo que sua conexão seja perdida.</p>\n<h2>Revisão de código</h2>\n<p>Cada código que vai para a produção deve ser revisado por outro programador. Os scripts não são exceção. Ponto final.</p>","frontmatter":{"title":"Criando scripts de linha de comando à prova de balas","date":"2019-05-18T00:00:00.000Z","description":null,"tags":["command","line","scripts"],"rating":null,"image_url":"https://unsplash.com/photos/ieic5Tq8YMk","image_author":"Chris Ried","image":{"publicURL":"/static/bfe5709c0636a4bf54fcf2870f0f945a/featured.jpg"}},"fields":{"slug":"/2019/2019-05-18-Criando_scripts_de_linha_de_comando_a_prova_de_balas/"},"timeToRead":3}},"pageContext":{"id":"4dd76a2a-84a7-559b-a41e-73df0f6b36e8","language":"pt","intl":{"language":"pt","languages":["en","pt"],"messages":{"of":"de","or":"ou","Next":"Próximo","Previous":"Anterior","reading":"leitura","Comments":"Comentários","Featured_image_credits":"Créditos da imagem de destaque","Not_Found":"Não Encontrado","Not_Found_Text":"A página que você está procurando pode ter sido removida, ter seu nome alterado ou estar temporariamente indisponível.","Not_Found_Nav":"Você pode ir para","Warning_deprecated":"Atenção: esse post foi escrito a algum tempo e pode não ser mais válido, ok?"},"routed":true,"originalPath":"/blog/2019/2019-05-18-Criando_scripts_de_linha_de_comando_a_prova_de_balas/","redirect":true,"defaultLanguage":"en"}}},"staticQueryHashes":["4061151221"]}