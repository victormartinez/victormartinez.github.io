{"version":3,"sources":["webpack:///./src/components/PostItem/styled.js","webpack:///./src/components/PostItem/index.js","webpack:///./src/components/Pagination/styled.js","webpack:///./src/components/Pagination/index.js","webpack:///./src/templates/blog-index.js","webpack:///./src/utils/date.js"],"names":["PostItemWrapper","styled","article","media","lessThan","ImageSection","div","PostLink","Link","Image","Img","greaterThan","between","TextSection","section","Header","header","Title","h2","Description","p","Metadata","Bullet","span","Category","Date","time","ReadingTime","PostItem","path","image","category","date","timeToRead","title","description","intl","useIntl","to","fluid","childImageSharp","formatDate","locale","formatMessage","id","PaginationWrapper","PaginationPrevious","PaginationNext","PaginationPage","PaginationLink","PaginationText","Pagination","isFirst","isLast","currentPage","numPages","prevPage","nextPage","pageQuery","BlogIndex","data","pageContext","siteTitle","site","siteMetadata","blog","noPosts","social","posts","portuguesePosts","nodes","author","name","keywords","allFile","edges","node","publicURL","prevPageUrl","nextPageUrl","length","LayoutContent","meta","property","content","join","Paragraph","text","itemscope","itemtype","map","post","key","fields","slug","pageDetailUrl","frontmatter","excerpt","moment","require","isPostDeprecated","datetime","diff","format","formatted","toUpperCase","slice"],"mappings":"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","file":"component---src-templates-blog-index-js-7a05c7debe18613f485c.js","sourcesContent":["import styled from \"styled-components\"\nimport media from \"styled-media-query\"\nimport { Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nexport const PostItemWrapper = styled.article`\n  background-color: #f3f3f3;\n  display: flex;\n  margin-bottom: 3em;\n\n  ${media.lessThan(\"medium\")`\n    flex-direction: column;\n    padding: 1em;\n  `};\n`\n\nexport const ImageSection = styled.div``\n\nexport const PostLink = styled(Link)``\n\nexport const Image = styled(Img)`\n  ${media.greaterThan(\"small\")`\n    width: 20em;\n    height: 12em;\n  `}\n\n  ${media.between(\"small\", \"medium\")`\n    width: 95vw;\n    height: 25vh;\n  `}\n`\n\nexport const TextSection = styled.section`\n  width: 100vw;\n  padding: 1em 1em 0em 1.5em;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  ${media.lessThan(\"small\")`\n    width: 95vw;\n  `};\n`\n\nexport const Header = styled.header`\n  margin-bottom: 1em;\n`\n\nexport const Title = styled.h2`\n  font-size: 1.4rem;\n  font-weight: 600;\n  line-height: 1.5;\n`\n\nexport const Description = styled.p`\n  line-height: 1.6;\n  font-size: 1rem;\n  font-weight: 300;\n`\n\nexport const Metadata = styled.div`\n  margin: 0.4em 0;\n  font-weight: 300;\n  line-height: 1.8;\n  font-size: 0.9rem;\n`\n\nexport const Bullet = styled.span`\n  margin: 0 1em;\n`\n\nexport const Category = styled.span``\n\nexport const Date = styled.time``\n\nexport const ReadingTime = styled.span``\n","import React from \"react\"\n\nimport { useIntl } from \"gatsby-plugin-intl\"\nimport { formatDate } from \"../../utils/date\"\nimport * as S from \"./styled\"\n\nconst PostItem = ({\n  path,\n  image,\n  category,\n  date,\n  timeToRead,\n  title,\n  description,\n}) => {\n  const intl = useIntl()\n\n  return (\n    <S.PostItemWrapper>\n      <S.ImageSection>\n        <S.PostLink to={path}>\n          {image && <S.Image fluid={image?.childImageSharp.fluid} />}\n        </S.PostLink>\n      </S.ImageSection>\n      <S.TextSection>\n        <S.Header>\n          <S.Title>\n            <S.PostLink to={path}>{title}</S.PostLink>\n          </S.Title>\n\n          <S.Metadata>\n            <S.Date>{formatDate(date, intl.locale)}</S.Date>\n            <S.Bullet>•</S.Bullet>\n            <S.ReadingTime>\n              {timeToRead} min {intl.formatMessage({ id: \"reading\" })}\n            </S.ReadingTime>\n            <S.Bullet>•</S.Bullet>\n            <S.Category>{category}</S.Category>\n          </S.Metadata>\n          <S.Description>{description}</S.Description>\n        </S.Header>\n      </S.TextSection>\n    </S.PostItemWrapper>\n  )\n}\n\nexport default PostItem\n","import styled from \"styled-components\"\nimport media from \"styled-media-query\"\nimport { Link } from \"gatsby\"\n\nexport const PaginationWrapper = styled.section`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-weight: 900;\n  padding: 2em 0;\n  height: 2em;\n  font-size: 1rem;\n\n  ${media.lessThan(\"medium\")`\n    padding: 2em 1em;\n  `}\n`\n\nexport const PaginationPrevious = styled.div`\n  width: 6em;\n  text-align: left;\n`\n\nexport const PaginationNext = styled.div`\n  width: 6em;\n  text-align: right;\n`\n\nexport const PaginationPage = styled.div`\n  width: 3em;\n`\n\nexport const PaginationLink = styled(Link)`\n  height: 1em;\n  width: 6em;\n`\n\nexport const PaginationText = styled.p`\n  color: #fff;\n`\n","import React from \"react\"\n\nimport propTypes from \"prop-types\"\nimport { useIntl } from \"gatsby-plugin-intl\"\n\nimport * as S from \"./styled\"\n\nconst Pagination = ({\n  isFirst,\n  isLast,\n  currentPage,\n  numPages,\n  prevPage,\n  nextPage,\n}) => {\n  const intl = useIntl()\n\n  return (\n    <S.PaginationWrapper>\n      <S.PaginationPrevious>\n        <S.PaginationLink to={isFirst ? \"#\" : prevPage}>\n          {isFirst ? null : `← ${intl.formatMessage({ id: \"Previous\" })}`}\n        </S.PaginationLink>\n      </S.PaginationPrevious>\n\n      <S.PaginationPage>\n        <S.PaginationText>\n          {currentPage} {intl.formatMessage({ id: \"of\" })} {numPages}\n        </S.PaginationText>\n      </S.PaginationPage>\n\n      <S.PaginationNext>\n        <S.PaginationLink to={isLast ? \"#\" : nextPage}>\n          {isLast ? null : `→ ${intl.formatMessage({ id: \"Next\" })}`}\n        </S.PaginationLink>\n      </S.PaginationNext>\n    </S.PaginationWrapper>\n  )\n}\n\nPagination.propTypes = {\n  isFirst: propTypes.bool.isRequired,\n  isLast: propTypes.bool.isRequired,\n  currentPage: propTypes.number.isRequired,\n  numPages: propTypes.number.isRequired,\n  prevPage: propTypes.string,\n  nextPage: propTypes.string,\n}\n\nexport default Pagination\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport LayoutContent from \"../components/LayoutContent\"\nimport PostItem from \"../components/PostItem\"\nimport Pagination from \"../components/Pagination\"\nimport Paragraph from \"../components/Paragraph\"\nimport SEO from \"../components/seo\"\n\nimport { useIntl } from \"gatsby-plugin-intl\"\nimport {\n  pageDetailUrl,\n  nextPageUrl,\n  prevPageUrl,\n} from \"../utils/routing.js\"\n\nconst BlogIndex = ({ data, pageContext }) => {\n  const intl = useIntl()\n\n  const siteTitle = data.site.siteMetadata[intl.locale].blog.title\n  const noPosts = data.site.siteMetadata[intl.locale].noPosts\n  const description = data.site.siteMetadata[intl.locale].blog.description\n  const social = data.site.siteMetadata.social\n  const posts = data.portuguesePosts.nodes\n  const author = data.site.siteMetadata.author.name\n  const keywords = data.site.siteMetadata.keywords\n  const image = data.allFile.edges[0].node.publicURL\n\n  const routeName = 'blog'\n  const { currentPage, numPages } = pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = prevPageUrl(intl.locale, routeName, currentPage)\n  const nextPage = nextPageUrl(intl.locale, routeName, currentPage)\n\n  if (posts.length === 0) {\n    return (\n      <LayoutContent\n        title={siteTitle}\n        description={description}\n        social={social}\n      >\n        <SEO\n          title={`${author} | ${siteTitle}`}\n          description={description}\n          image={image}\n          meta={[\n            {\n              property: `keywords`,\n              content: keywords.join(\", \"),\n            },\n          ]}\n        />\n        <Paragraph text={noPosts} />\n      </LayoutContent>\n    )\n  }\n\n  return (\n    <LayoutContent\n      itemscope\n      itemtype=\"https://schema.org/Blog\"\n      title={siteTitle}\n      description={description}\n      social={social}\n    >\n      <SEO\n        title={`${author} | ${siteTitle}`}\n        description={`${siteTitle} ${description}`}\n        image={image}\n        meta={[\n          {\n            property: `keywords`,\n            content: keywords.join(\", \"),\n          },\n        ]}\n      />\n      {posts.map(post => {\n        return (\n          <PostItem\n            key={post.fields.slug}\n            path={`${pageDetailUrl(intl.locale, routeName, post.fields.slug)}`}\n            title={post.frontmatter.title || post.fields.slug}\n            date={post.frontmatter.date}\n            description={post.frontmatter.description || post.excerpt}\n            timeToRead={post.timeToRead}\n            category={post.frontmatter.category}\n            image={post.frontmatter.image}\n          />\n        )\n      })}\n      <Pagination\n        isFirst={isFirst}\n        isLast={isLast}\n        currentPage={currentPage}\n        numPages={numPages}\n        prevPage={prevPage}\n        nextPage={nextPage}\n      />\n    </LayoutContent>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query PostList($skip: Int!, $limit: Int!) {\n    allFile(\n      filter: {\n        absolutePath: { regex: \"/content/assets/\" }\n        name: { eq: \"cover\" }\n      }\n    ) {\n      edges {\n        node {\n          name\n          publicURL\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author {\n          name\n        }\n        social {\n          twitter\n          github\n          linkedin\n          speakerdeck\n        }\n        keywords\n        pt {\n          noPosts\n          blog {\n            title\n            description\n          }\n        }\n      }\n    }\n    portuguesePosts: allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"/content/blog/\" }\n        frontmatter: { layout: { eq: \"post\" } }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        excerpt(pruneLength: 180)\n        fields {\n          slug\n        }\n        frontmatter {\n          date\n          title\n          description\n          category\n          image {\n            publicURL\n            childImageSharp {\n              fluid(maxHeight: 368, maxWidth: 640) {\n                ...GatsbyImageSharpFluid_tracedSVG\n              }\n            }\n          }\n        }\n        timeToRead\n      }\n    }\n  }\n`\n","const moment = require(\"moment\")\n\nexport const isPostDeprecated = datetime => {\n  const months = moment().diff(\n    moment(datetime, \"YYYY-MM-DDTHH:mm:ss\"),\n    \"months\"\n  )\n  return months >= 24\n}\n\nexport const formatDate = (datetime, locale) => {\n  if (locale === \"en\") {\n    return moment(datetime, \"YYYY-MM-DDTHH:mm:ss\")\n      .locale(\"en\")\n      .format(\"MMM DD, YYYY\")\n  }\n  let formatted = moment(datetime, \"YYYY-MM-DDTHH:mm:ss\")\n    .locale(\"pt-br\")\n    .format(\"MMM DD, YYYY\")\n\n  return `${formatted[0].toUpperCase()}${formatted.slice(1)}`\n}\n"],"sourceRoot":""}